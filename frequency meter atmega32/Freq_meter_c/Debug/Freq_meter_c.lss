
Freq_meter_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000030fc  00003190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800084  00800084  000031b4  2**0
                  ALLOC
  3 .stab         00002220  00000000  00000000  000031b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c0c  00000000  00000000  000053d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000062cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008314  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009415  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 13 	call	0x2648	; 0x2648 <main>
      8a:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_SetPortDirection>:
#include "BIT_MATH.h"
#include "DIO_register.h"
#include "DIO_interface.h"


void DIO_SetPortDirection(u8 PortNo, u8 Direction){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_SetPortDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_SetPortDirection+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNo){
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3c 83       	std	Y+4, r19	; 0x04
     cb6:	2b 83       	std	Y+3, r18	; 0x03
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	d1 f0       	breq	.+52     	; 0xcf6 <DIO_SetPortDirection+0x58>
     cc2:	2b 81       	ldd	r18, Y+3	; 0x03
     cc4:	3c 81       	ldd	r19, Y+4	; 0x04
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <DIO_SetPortDirection+0x38>
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	61 f0       	breq	.+24     	; 0xcec <DIO_SetPortDirection+0x4e>
     cd4:	1e c0       	rjmp	.+60     	; 0xd12 <DIO_SetPortDirection+0x74>
     cd6:	2b 81       	ldd	r18, Y+3	; 0x03
     cd8:	3c 81       	ldd	r19, Y+4	; 0x04
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	81 f0       	breq	.+32     	; 0xd00 <DIO_SetPortDirection+0x62>
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <DIO_SetPortDirection+0x6c>
     cea:	13 c0       	rjmp	.+38     	; 0xd12 <DIO_SetPortDirection+0x74>
	case PORT_A:
		DDRA_register=Direction;
     cec:	ea e3       	ldi	r30, 0x3A	; 58
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	80 83       	st	Z, r24
     cf4:	0e c0       	rjmp	.+28     	; 0xd12 <DIO_SetPortDirection+0x74>
		break;
	case PORT_B:
		DDRB_register=Direction;
     cf6:	e7 e3       	ldi	r30, 0x37	; 55
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	80 83       	st	Z, r24
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <DIO_SetPortDirection+0x74>
		break;
	case PORT_C:
		DDRC_register=Direction;
     d00:	e4 e3       	ldi	r30, 0x34	; 52
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	80 83       	st	Z, r24
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <DIO_SetPortDirection+0x74>
		break;
	case PORT_D:
		DDRD_register=Direction;
     d0a:	e1 e3       	ldi	r30, 0x31	; 49
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <DIO_SetPinDirection>:
void DIO_SetPinDirection(u8 PortNo, u8 PinNo ,u8 Direction){
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <DIO_SetPinDirection+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <DIO_SetPinDirection+0x8>
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	6a 83       	std	Y+2, r22	; 0x02
     d32:	4b 83       	std	Y+3, r20	; 0x03
	if(PinNo>=PIN_0 && PinNo<=PIN_7){
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	88 30       	cpi	r24, 0x08	; 8
     d38:	08 f0       	brcs	.+2      	; 0xd3c <DIO_SetPinDirection+0x1c>
     d3a:	e0 c0       	rjmp	.+448    	; 0xefc <DIO_SetPinDirection+0x1dc>
		switch(PortNo){
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	3d 83       	std	Y+5, r19	; 0x05
     d44:	2c 83       	std	Y+4, r18	; 0x04
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	9d 81       	ldd	r25, Y+5	; 0x05
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_SetPinDirection+0x32>
     d50:	47 c0       	rjmp	.+142    	; 0xde0 <DIO_SetPinDirection+0xc0>
     d52:	2c 81       	ldd	r18, Y+4	; 0x04
     d54:	3d 81       	ldd	r19, Y+5	; 0x05
     d56:	22 30       	cpi	r18, 0x02	; 2
     d58:	31 05       	cpc	r19, r1
     d5a:	2c f4       	brge	.+10     	; 0xd66 <DIO_SetPinDirection+0x46>
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	9d 81       	ldd	r25, Y+5	; 0x05
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	71 f0       	breq	.+28     	; 0xd80 <DIO_SetPinDirection+0x60>
     d64:	cb c0       	rjmp	.+406    	; 0xefc <DIO_SetPinDirection+0x1dc>
     d66:	2c 81       	ldd	r18, Y+4	; 0x04
     d68:	3d 81       	ldd	r19, Y+5	; 0x05
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	31 05       	cpc	r19, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <DIO_SetPinDirection+0x52>
     d70:	67 c0       	rjmp	.+206    	; 0xe40 <DIO_SetPinDirection+0x120>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	91 05       	cpc	r25, r1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <DIO_SetPinDirection+0x5e>
     d7c:	91 c0       	rjmp	.+290    	; 0xea0 <DIO_SetPinDirection+0x180>
     d7e:	be c0       	rjmp	.+380    	; 0xefc <DIO_SetPinDirection+0x1dc>
		case PORT_A:
			if(Direction==PIN_OUTPUT){
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	a1 f4       	brne	.+40     	; 0xdae <DIO_SetPinDirection+0x8e>
				Set_Bit(DDRA_register,PinNo);
     d86:	aa e3       	ldi	r26, 0x3A	; 58
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ea e3       	ldi	r30, 0x3A	; 58
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_SetPinDirection+0x84>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_SetPinDirection+0x80>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	a7 c0       	rjmp	.+334    	; 0xefc <DIO_SetPinDirection+0x1dc>
			}
			else if(Direction==PIN_INPUT){
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	88 23       	and	r24, r24
     db2:	09 f0       	breq	.+2      	; 0xdb6 <DIO_SetPinDirection+0x96>
     db4:	a3 c0       	rjmp	.+326    	; 0xefc <DIO_SetPinDirection+0x1dc>
				Clr_Bit(DDRA_register,PinNo);
     db6:	aa e3       	ldi	r26, 0x3A	; 58
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ea e3       	ldi	r30, 0x3A	; 58
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_SetPinDirection+0xb4>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_SetPinDirection+0xb0>
     dd8:	80 95       	com	r24
     dda:	84 23       	and	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	8e c0       	rjmp	.+284    	; 0xefc <DIO_SetPinDirection+0x1dc>
			else{

			}
			break;
		case PORT_B:
			if(Direction==PIN_OUTPUT){
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	a1 f4       	brne	.+40     	; 0xe0e <DIO_SetPinDirection+0xee>
				Set_Bit(DDRB_register,PinNo);
     de6:	a7 e3       	ldi	r26, 0x37	; 55
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_SetPinDirection+0xe4>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_SetPinDirection+0xe0>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	77 c0       	rjmp	.+238    	; 0xefc <DIO_SetPinDirection+0x1dc>
			}
			else if(Direction==PIN_INPUT){
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	88 23       	and	r24, r24
     e12:	09 f0       	breq	.+2      	; 0xe16 <DIO_SetPinDirection+0xf6>
     e14:	73 c0       	rjmp	.+230    	; 0xefc <DIO_SetPinDirection+0x1dc>
				Clr_Bit(DDRB_register,PinNo);
     e16:	a7 e3       	ldi	r26, 0x37	; 55
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e7 e3       	ldi	r30, 0x37	; 55
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_SetPinDirection+0x114>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_SetPinDirection+0x110>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	5e c0       	rjmp	.+188    	; 0xefc <DIO_SetPinDirection+0x1dc>
			else{

			}
			break;
		case PORT_C:
			if(Direction==PIN_OUTPUT){
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	a1 f4       	brne	.+40     	; 0xe6e <DIO_SetPinDirection+0x14e>
				Set_Bit(DDRC_register,PinNo);
     e46:	a4 e3       	ldi	r26, 0x34	; 52
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e4 e3       	ldi	r30, 0x34	; 52
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_SetPinDirection+0x144>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_SetPinDirection+0x140>
     e68:	84 2b       	or	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	47 c0       	rjmp	.+142    	; 0xefc <DIO_SetPinDirection+0x1dc>
			}
			else if(Direction==PIN_INPUT){
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	88 23       	and	r24, r24
     e72:	09 f0       	breq	.+2      	; 0xe76 <DIO_SetPinDirection+0x156>
     e74:	43 c0       	rjmp	.+134    	; 0xefc <DIO_SetPinDirection+0x1dc>
				Clr_Bit(DDRC_register,PinNo);
     e76:	a4 e3       	ldi	r26, 0x34	; 52
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e4 e3       	ldi	r30, 0x34	; 52
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_SetPinDirection+0x174>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_SetPinDirection+0x170>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	2e c0       	rjmp	.+92     	; 0xefc <DIO_SetPinDirection+0x1dc>
			else{

			}
			break;
		case PORT_D:
			if(Direction==PIN_OUTPUT){
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	a1 f4       	brne	.+40     	; 0xece <DIO_SetPinDirection+0x1ae>
				Set_Bit(DDRD_register,PinNo);
     ea6:	a1 e3       	ldi	r26, 0x31	; 49
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e1 e3       	ldi	r30, 0x31	; 49
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_SetPinDirection+0x1a4>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_SetPinDirection+0x1a0>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	17 c0       	rjmp	.+46     	; 0xefc <DIO_SetPinDirection+0x1dc>
			}
			else if(Direction==PIN_INPUT){
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	88 23       	and	r24, r24
     ed2:	a1 f4       	brne	.+40     	; 0xefc <DIO_SetPinDirection+0x1dc>
				Clr_Bit(DDRD_register,PinNo);
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_SetPinDirection+0x1d2>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_SetPinDirection+0x1ce>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
		}
	}
	else{

	}
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <DIO_SetPinValue>:


void DIO_SetPinValue(u8 PortNo, u8 PinNo ,u8 Value){
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <DIO_SetPinValue+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <DIO_SetPinValue+0x8>
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	6a 83       	std	Y+2, r22	; 0x02
     f1e:	4b 83       	std	Y+3, r20	; 0x03
	if(PinNo>=PIN_0 && PinNo<=PIN_7){
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	88 30       	cpi	r24, 0x08	; 8
     f24:	08 f0       	brcs	.+2      	; 0xf28 <DIO_SetPinValue+0x1c>
     f26:	e0 c0       	rjmp	.+448    	; 0x10e8 <DIO_SetPinValue+0x1dc>
		switch(PortNo){
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3d 83       	std	Y+5, r19	; 0x05
     f30:	2c 83       	std	Y+4, r18	; 0x04
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <DIO_SetPinValue+0x32>
     f3c:	47 c0       	rjmp	.+142    	; 0xfcc <DIO_SetPinValue+0xc0>
     f3e:	2c 81       	ldd	r18, Y+4	; 0x04
     f40:	3d 81       	ldd	r19, Y+5	; 0x05
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	2c f4       	brge	.+10     	; 0xf52 <DIO_SetPinValue+0x46>
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	71 f0       	breq	.+28     	; 0xf6c <DIO_SetPinValue+0x60>
     f50:	cb c0       	rjmp	.+406    	; 0x10e8 <DIO_SetPinValue+0x1dc>
     f52:	2c 81       	ldd	r18, Y+4	; 0x04
     f54:	3d 81       	ldd	r19, Y+5	; 0x05
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <DIO_SetPinValue+0x52>
     f5c:	67 c0       	rjmp	.+206    	; 0x102c <DIO_SetPinValue+0x120>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	91 05       	cpc	r25, r1
     f66:	09 f4       	brne	.+2      	; 0xf6a <DIO_SetPinValue+0x5e>
     f68:	91 c0       	rjmp	.+290    	; 0x108c <DIO_SetPinValue+0x180>
     f6a:	be c0       	rjmp	.+380    	; 0x10e8 <DIO_SetPinValue+0x1dc>
		case PORT_A:
			if(Value==PIN_HIGH){
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	a1 f4       	brne	.+40     	; 0xf9a <DIO_SetPinValue+0x8e>
				Set_Bit(PORTA_register,PinNo);
     f72:	ab e3       	ldi	r26, 0x3B	; 59
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	eb e3       	ldi	r30, 0x3B	; 59
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_SetPinValue+0x84>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_SetPinValue+0x80>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	a7 c0       	rjmp	.+334    	; 0x10e8 <DIO_SetPinValue+0x1dc>
			}
			else if(Value==PIN_LOW){
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 23       	and	r24, r24
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <DIO_SetPinValue+0x96>
     fa0:	a3 c0       	rjmp	.+326    	; 0x10e8 <DIO_SetPinValue+0x1dc>
				Clr_Bit(PORTA_register,PinNo);
     fa2:	ab e3       	ldi	r26, 0x3B	; 59
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	eb e3       	ldi	r30, 0x3B	; 59
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_SetPinValue+0xb4>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_SetPinValue+0xb0>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	8e c0       	rjmp	.+284    	; 0x10e8 <DIO_SetPinValue+0x1dc>
			else{

			}
			break;
		case PORT_B:
			if(Value==PIN_HIGH){
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	a1 f4       	brne	.+40     	; 0xffa <DIO_SetPinValue+0xee>
				Set_Bit(PORTB_register,PinNo);
     fd2:	a8 e3       	ldi	r26, 0x38	; 56
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e3       	ldi	r30, 0x38	; 56
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_SetPinValue+0xe4>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_SetPinValue+0xe0>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	77 c0       	rjmp	.+238    	; 0x10e8 <DIO_SetPinValue+0x1dc>
			}
			else if(Value==PIN_LOW){
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	88 23       	and	r24, r24
     ffe:	09 f0       	breq	.+2      	; 0x1002 <DIO_SetPinValue+0xf6>
    1000:	73 c0       	rjmp	.+230    	; 0x10e8 <DIO_SetPinValue+0x1dc>
				Clr_Bit(PORTB_register,PinNo);
    1002:	a8 e3       	ldi	r26, 0x38	; 56
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e8 e3       	ldi	r30, 0x38	; 56
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_SetPinValue+0x114>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_SetPinValue+0x110>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	5e c0       	rjmp	.+188    	; 0x10e8 <DIO_SetPinValue+0x1dc>
			else{

			}
			break;
		case PORT_C:
			if(Value==PIN_HIGH){
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	a1 f4       	brne	.+40     	; 0x105a <DIO_SetPinValue+0x14e>
				Set_Bit(PORTC_register,PinNo);
    1032:	a5 e3       	ldi	r26, 0x35	; 53
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e5 e3       	ldi	r30, 0x35	; 53
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_SetPinValue+0x144>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_SetPinValue+0x140>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	47 c0       	rjmp	.+142    	; 0x10e8 <DIO_SetPinValue+0x1dc>
			}
			else if(Value==PIN_LOW){
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 23       	and	r24, r24
    105e:	09 f0       	breq	.+2      	; 0x1062 <DIO_SetPinValue+0x156>
    1060:	43 c0       	rjmp	.+134    	; 0x10e8 <DIO_SetPinValue+0x1dc>
				Clr_Bit(PORTC_register,PinNo);
    1062:	a5 e3       	ldi	r26, 0x35	; 53
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_SetPinValue+0x174>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_SetPinValue+0x170>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	2e c0       	rjmp	.+92     	; 0x10e8 <DIO_SetPinValue+0x1dc>
			else{

			}
			break;
		case PORT_D:
			if(Value==PIN_HIGH){
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	a1 f4       	brne	.+40     	; 0x10ba <DIO_SetPinValue+0x1ae>
				Set_Bit(PORTD_register,PinNo);
    1092:	a2 e3       	ldi	r26, 0x32	; 50
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e2 e3       	ldi	r30, 0x32	; 50
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_SetPinValue+0x1a4>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_SetPinValue+0x1a0>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	17 c0       	rjmp	.+46     	; 0x10e8 <DIO_SetPinValue+0x1dc>
			}
			else if(Value==PIN_LOW){
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	88 23       	and	r24, r24
    10be:	a1 f4       	brne	.+40     	; 0x10e8 <DIO_SetPinValue+0x1dc>
				Clr_Bit(PORTD_register,PinNo);
    10c0:	a2 e3       	ldi	r26, 0x32	; 50
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e2 e3       	ldi	r30, 0x32	; 50
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_SetPinValue+0x1d2>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_SetPinValue+0x1ce>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
		}
	}
	else{

	}
}
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <DIO_GetPinValue>:


u8 DIO_GetPinValue(u8 PortNo, u8 PinNo){
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <DIO_GetPinValue+0x6>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <DIO_GetPinValue+0x8>
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	8a 83       	std	Y+2, r24	; 0x02
    1108:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_return;
	if(PinNo>=PIN_0 && PinNo<=PIN_7){
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 30       	cpi	r24, 0x08	; 8
    110e:	08 f0       	brcs	.+2      	; 0x1112 <DIO_GetPinValue+0x1a>
    1110:	67 c0       	rjmp	.+206    	; 0x11e0 <DIO_GetPinValue+0xe8>
		switch(PortNo){
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3d 83       	std	Y+5, r19	; 0x05
    111a:	2c 83       	std	Y+4, r18	; 0x04
    111c:	4c 81       	ldd	r20, Y+4	; 0x04
    111e:	5d 81       	ldd	r21, Y+5	; 0x05
    1120:	41 30       	cpi	r20, 0x01	; 1
    1122:	51 05       	cpc	r21, r1
    1124:	41 f1       	breq	.+80     	; 0x1176 <DIO_GetPinValue+0x7e>
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	91 05       	cpc	r25, r1
    112e:	34 f4       	brge	.+12     	; 0x113c <DIO_GetPinValue+0x44>
    1130:	2c 81       	ldd	r18, Y+4	; 0x04
    1132:	3d 81       	ldd	r19, Y+5	; 0x05
    1134:	21 15       	cp	r18, r1
    1136:	31 05       	cpc	r19, r1
    1138:	61 f0       	breq	.+24     	; 0x1152 <DIO_GetPinValue+0x5a>
    113a:	52 c0       	rjmp	.+164    	; 0x11e0 <DIO_GetPinValue+0xe8>
    113c:	4c 81       	ldd	r20, Y+4	; 0x04
    113e:	5d 81       	ldd	r21, Y+5	; 0x05
    1140:	42 30       	cpi	r20, 0x02	; 2
    1142:	51 05       	cpc	r21, r1
    1144:	51 f1       	breq	.+84     	; 0x119a <DIO_GetPinValue+0xa2>
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	b9 f1       	breq	.+110    	; 0x11be <DIO_GetPinValue+0xc6>
    1150:	47 c0       	rjmp	.+142    	; 0x11e0 <DIO_GetPinValue+0xe8>
		case PORT_A:
			local_return=Get_Bit(PINA_register,PinNo);
    1152:	e9 e3       	ldi	r30, 0x39	; 57
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_GetPinValue+0x72>
    1166:	55 95       	asr	r21
    1168:	47 95       	ror	r20
    116a:	8a 95       	dec	r24
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_GetPinValue+0x6e>
    116e:	ca 01       	movw	r24, r20
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	35 c0       	rjmp	.+106    	; 0x11e0 <DIO_GetPinValue+0xe8>
			break;
		case PORT_B:
			local_return=Get_Bit(PINB_register,PinNo);
    1176:	e6 e3       	ldi	r30, 0x36	; 54
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a9 01       	movw	r20, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_GetPinValue+0x96>
    118a:	55 95       	asr	r21
    118c:	47 95       	ror	r20
    118e:	8a 95       	dec	r24
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_GetPinValue+0x92>
    1192:	ca 01       	movw	r24, r20
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	23 c0       	rjmp	.+70     	; 0x11e0 <DIO_GetPinValue+0xe8>
			break;
		case PORT_C:
			local_return=Get_Bit(PINC_register,PinNo);
    119a:	e3 e3       	ldi	r30, 0x33	; 51
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a9 01       	movw	r20, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_GetPinValue+0xba>
    11ae:	55 95       	asr	r21
    11b0:	47 95       	ror	r20
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_GetPinValue+0xb6>
    11b6:	ca 01       	movw	r24, r20
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	11 c0       	rjmp	.+34     	; 0x11e0 <DIO_GetPinValue+0xe8>
			break;
		case PORT_D:
			local_return=Get_Bit(PIND_register,PinNo);
    11be:	e0 e3       	ldi	r30, 0x30	; 48
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a9 01       	movw	r20, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_GetPinValue+0xde>
    11d2:	55 95       	asr	r21
    11d4:	47 95       	ror	r20
    11d6:	8a 95       	dec	r24
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_GetPinValue+0xda>
    11da:	ca 01       	movw	r24, r20
    11dc:	81 70       	andi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{

	}
	return local_return;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <DIO_TogglePinValue>:


void DIO_TogglePinValue(u8 PortNo, u8 PinNo){
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_TogglePinValue+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <DIO_TogglePinValue+0x8>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNo>=PIN_0 && PinNo<=PIN_7){
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	88 30       	cpi	r24, 0x08	; 8
    1206:	08 f0       	brcs	.+2      	; 0x120a <DIO_TogglePinValue+0x18>
    1208:	6e c0       	rjmp	.+220    	; 0x12e6 <DIO_TogglePinValue+0xf4>
		switch(PortNo){
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3c 83       	std	Y+4, r19	; 0x04
    1212:	2b 83       	std	Y+3, r18	; 0x03
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	49 f1       	breq	.+82     	; 0x1270 <DIO_TogglePinValue+0x7e>
    121e:	2b 81       	ldd	r18, Y+3	; 0x03
    1220:	3c 81       	ldd	r19, Y+4	; 0x04
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	2c f4       	brge	.+10     	; 0x1232 <DIO_TogglePinValue+0x40>
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	61 f0       	breq	.+24     	; 0x1248 <DIO_TogglePinValue+0x56>
    1230:	5a c0       	rjmp	.+180    	; 0x12e6 <DIO_TogglePinValue+0xf4>
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	71 f1       	breq	.+92     	; 0x1298 <DIO_TogglePinValue+0xa6>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	e9 f1       	breq	.+122    	; 0x12c0 <DIO_TogglePinValue+0xce>
    1246:	4f c0       	rjmp	.+158    	; 0x12e6 <DIO_TogglePinValue+0xf4>
		case PORT_A:
			Tog_Bit(PORTA_register,PinNo);
    1248:	ab e3       	ldi	r26, 0x3B	; 59
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_TogglePinValue+0x74>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_TogglePinValue+0x70>
    126a:	84 27       	eor	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	3b c0       	rjmp	.+118    	; 0x12e6 <DIO_TogglePinValue+0xf4>
			break;
		case PORT_B:
			Tog_Bit(PORTB_register,PinNo);
    1270:	a8 e3       	ldi	r26, 0x38	; 56
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e8 e3       	ldi	r30, 0x38	; 56
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_TogglePinValue+0x9c>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_TogglePinValue+0x98>
    1292:	84 27       	eor	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	27 c0       	rjmp	.+78     	; 0x12e6 <DIO_TogglePinValue+0xf4>
			break;
		case PORT_C:
			Tog_Bit(PORTC_register,PinNo);
    1298:	a5 e3       	ldi	r26, 0x35	; 53
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e5 e3       	ldi	r30, 0x35	; 53
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_TogglePinValue+0xc4>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_TogglePinValue+0xc0>
    12ba:	84 27       	eor	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	13 c0       	rjmp	.+38     	; 0x12e6 <DIO_TogglePinValue+0xf4>
			break;
		case PORT_D:
			Tog_Bit(PORTD_register,PinNo);
    12c0:	a2 e3       	ldi	r26, 0x32	; 50
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e2 e3       	ldi	r30, 0x32	; 50
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_TogglePinValue+0xec>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_TogglePinValue+0xe8>
    12e2:	84 27       	eor	r24, r20
    12e4:	8c 93       	st	X, r24
		}
	}
	else{

	}
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <GLOBAL_INTERRUPT_Enable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GLOBAL_INTERRUPT_register.h"
#include "GLOBAL_INTERRUPT_interface.h"

void GLOBAL_INTERRUPT_Enable(void){
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG_register,I);
    12fc:	af e5       	ldi	r26, 0x5F	; 95
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	ef e5       	ldi	r30, 0x5F	; 95
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 68       	ori	r24, 0x80	; 128
    1308:	8c 93       	st	X, r24
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <GLOBAL_INTERRUPT_Disable>:
void GLOBAL_INTERRUPT_Disable(void){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG_register,I);
    1318:	af e5       	ldi	r26, 0x5F	; 95
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ef e5       	ldi	r30, 0x5F	; 95
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8f 77       	andi	r24, 0x7F	; 127
    1324:	8c 93       	st	X, r24
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <LCD_Init>:
#include "avr/delay.h"
#include "DIO_interface.h"
#include "LCD_config.h"
#include "LCD_interface.h"

void LCD_Init(void){
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	c4 55       	subi	r28, 0x54	; 84
    133a:	d0 40       	sbci	r29, 0x00	; 0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	6f ef       	ldi	r22, 0xFF	; 255
    134a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,PIN_OUTPUT);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	62 e0       	ldi	r22, 0x02	; 2
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,RW_PIN,PIN_OUTPUT);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	63 e0       	ldi	r22, 0x03	; 3
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,PIN_OUTPUT);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	64 e0       	ldi	r22, 0x04	; 4
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_SetPinDirection>
    136c:	fe 01       	movw	r30, r28
    136e:	ef 5a       	subi	r30, 0xAF	; 175
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a0 ef       	ldi	r26, 0xF0	; 240
    1378:	b1 e4       	ldi	r27, 0x41	; 65
    137a:	80 83       	st	Z, r24
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	a2 83       	std	Z+2, r26	; 0x02
    1380:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1382:	8e 01       	movw	r16, r28
    1384:	03 5b       	subi	r16, 0xB3	; 179
    1386:	1f 4f       	sbci	r17, 0xFF	; 255
    1388:	fe 01       	movw	r30, r28
    138a:	ef 5a       	subi	r30, 0xAF	; 175
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a e7       	ldi	r20, 0x7A	; 122
    139c:	55 e4       	ldi	r21, 0x45	; 69
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	f8 01       	movw	r30, r16
    13a8:	80 83       	st	Z, r24
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	a2 83       	std	Z+2, r26	; 0x02
    13ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13b0:	fe 01       	movw	r30, r28
    13b2:	e3 5b       	subi	r30, 0xB3	; 179
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	60 81       	ld	r22, Z
    13b8:	71 81       	ldd	r23, Z+1	; 0x01
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e8       	ldi	r20, 0x80	; 128
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ca:	88 23       	and	r24, r24
    13cc:	44 f4       	brge	.+16     	; 0x13de <LCD_Init+0xb2>
		__ticks = 1;
    13ce:	fe 01       	movw	r30, r28
    13d0:	e5 5b       	subi	r30, 0xB5	; 181
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	64 c0       	rjmp	.+200    	; 0x14a6 <LCD_Init+0x17a>
	else if (__tmp > 65535)
    13de:	fe 01       	movw	r30, r28
    13e0:	e3 5b       	subi	r30, 0xB3	; 179
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	4f e7       	ldi	r20, 0x7F	; 127
    13f2:	57 e4       	ldi	r21, 0x47	; 71
    13f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13f8:	18 16       	cp	r1, r24
    13fa:	0c f0       	brlt	.+2      	; 0x13fe <LCD_Init+0xd2>
    13fc:	43 c0       	rjmp	.+134    	; 0x1484 <LCD_Init+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fe:	fe 01       	movw	r30, r28
    1400:	ef 5a       	subi	r30, 0xAF	; 175
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	93 81       	ldd	r25, Z+3	; 0x03
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	8e 01       	movw	r16, r28
    141e:	05 5b       	subi	r16, 0xB5	; 181
    1420:	1f 4f       	sbci	r17, 0xFF	; 255
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	f8 01       	movw	r30, r16
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	80 83       	st	Z, r24
    1434:	1f c0       	rjmp	.+62     	; 0x1474 <LCD_Init+0x148>
    1436:	fe 01       	movw	r30, r28
    1438:	e7 5b       	subi	r30, 0xB7	; 183
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	80 e9       	ldi	r24, 0x90	; 144
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1444:	fe 01       	movw	r30, r28
    1446:	e7 5b       	subi	r30, 0xB7	; 183
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <LCD_Init+0x122>
    1452:	fe 01       	movw	r30, r28
    1454:	e7 5b       	subi	r30, 0xB7	; 183
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145c:	de 01       	movw	r26, r28
    145e:	a5 5b       	subi	r26, 0xB5	; 181
    1460:	bf 4f       	sbci	r27, 0xFF	; 255
    1462:	fe 01       	movw	r30, r28
    1464:	e5 5b       	subi	r30, 0xB5	; 181
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	9c 93       	st	X, r25
    1472:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	fe 01       	movw	r30, r28
    1476:	e5 5b       	subi	r30, 0xB5	; 181
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	d1 f6       	brne	.-76     	; 0x1436 <LCD_Init+0x10a>
    1482:	27 c0       	rjmp	.+78     	; 0x14d2 <LCD_Init+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	8e 01       	movw	r16, r28
    1486:	05 5b       	subi	r16, 0xB5	; 181
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	fe 01       	movw	r30, r28
    148c:	e3 5b       	subi	r30, 0xB3	; 179
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	f8 01       	movw	r30, r16
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	de 01       	movw	r26, r28
    14a8:	a9 5b       	subi	r26, 0xB9	; 185
    14aa:	bf 4f       	sbci	r27, 0xFF	; 255
    14ac:	fe 01       	movw	r30, r28
    14ae:	e5 5b       	subi	r30, 0xB5	; 181
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	8d 93       	st	X+, r24
    14b8:	9c 93       	st	X, r25
    14ba:	fe 01       	movw	r30, r28
    14bc:	e9 5b       	subi	r30, 0xB9	; 185
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	80 81       	ld	r24, Z
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <LCD_Init+0x198>
    14c8:	fe 01       	movw	r30, r28
    14ca:	e9 5b       	subi	r30, 0xB9	; 185
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	80 83       	st	Z, r24
	_delay_ms(30);

	LCD_Write_Command(0X02);
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>
	LCD_Write_Command(0X28);
    14d8:	88 e2       	ldi	r24, 0x28	; 40
    14da:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>
    14de:	fe 01       	movw	r30, r28
    14e0:	ed 5b       	subi	r30, 0xBD	; 189
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a0 e4       	ldi	r26, 0x40	; 64
    14ea:	b0 e4       	ldi	r27, 0x40	; 64
    14ec:	80 83       	st	Z, r24
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	a2 83       	std	Z+2, r26	; 0x02
    14f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f4:	8e 01       	movw	r16, r28
    14f6:	01 5c       	subi	r16, 0xC1	; 193
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	ed 5b       	subi	r30, 0xBD	; 189
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	4a e7       	ldi	r20, 0x7A	; 122
    150e:	55 e4       	ldi	r21, 0x45	; 69
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	f8 01       	movw	r30, r16
    151a:	80 83       	st	Z, r24
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	a2 83       	std	Z+2, r26	; 0x02
    1520:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1522:	fe 01       	movw	r30, r28
    1524:	ff 96       	adiw	r30, 0x3f	; 63
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e8       	ldi	r20, 0x80	; 128
    1534:	5f e3       	ldi	r21, 0x3F	; 63
    1536:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    153a:	88 23       	and	r24, r24
    153c:	2c f4       	brge	.+10     	; 0x1548 <LCD_Init+0x21c>
		__ticks = 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9e af       	std	Y+62, r25	; 0x3e
    1544:	8d af       	std	Y+61, r24	; 0x3d
    1546:	46 c0       	rjmp	.+140    	; 0x15d4 <LCD_Init+0x2a8>
	else if (__tmp > 65535)
    1548:	fe 01       	movw	r30, r28
    154a:	ff 96       	adiw	r30, 0x3f	; 63
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	3f ef       	ldi	r19, 0xFF	; 255
    1558:	4f e7       	ldi	r20, 0x7F	; 127
    155a:	57 e4       	ldi	r21, 0x47	; 71
    155c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1560:	18 16       	cp	r1, r24
    1562:	64 f5       	brge	.+88     	; 0x15bc <LCD_Init+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1564:	fe 01       	movw	r30, r28
    1566:	ed 5b       	subi	r30, 0xBD	; 189
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	60 81       	ld	r22, Z
    156c:	71 81       	ldd	r23, Z+1	; 0x01
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e2       	ldi	r20, 0x20	; 32
    1578:	51 e4       	ldi	r21, 0x41	; 65
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	bc 01       	movw	r22, r24
    1584:	cd 01       	movw	r24, r26
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	9e af       	std	Y+62, r25	; 0x3e
    1590:	8d af       	std	Y+61, r24	; 0x3d
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <LCD_Init+0x286>
    1594:	80 e9       	ldi	r24, 0x90	; 144
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	9c af       	std	Y+60, r25	; 0x3c
    159a:	8b af       	std	Y+59, r24	; 0x3b
    159c:	8b ad       	ldd	r24, Y+59	; 0x3b
    159e:	9c ad       	ldd	r25, Y+60	; 0x3c
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <LCD_Init+0x274>
    15a4:	9c af       	std	Y+60, r25	; 0x3c
    15a6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	9e af       	std	Y+62, r25	; 0x3e
    15b0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    15b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	69 f7       	brne	.-38     	; 0x1594 <LCD_Init+0x268>
    15ba:	16 c0       	rjmp	.+44     	; 0x15e8 <LCD_Init+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15bc:	fe 01       	movw	r30, r28
    15be:	ff 96       	adiw	r30, 0x3f	; 63
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	9e af       	std	Y+62, r25	; 0x3e
    15d2:	8d af       	std	Y+61, r24	; 0x3d
    15d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    15d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    15d8:	9a af       	std	Y+58, r25	; 0x3a
    15da:	89 af       	std	Y+57, r24	; 0x39
    15dc:	89 ad       	ldd	r24, Y+57	; 0x39
    15de:	9a ad       	ldd	r25, Y+58	; 0x3a
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_Init+0x2b4>
    15e4:	9a af       	std	Y+58, r25	; 0x3a
    15e6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(3);

	LCD_Write_Command(lcd_DisplayOn);
    15e8:	8c e0       	ldi	r24, 0x0C	; 12
    15ea:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e4       	ldi	r26, 0x40	; 64
    15f4:	b0 e4       	ldi	r27, 0x40	; 64
    15f6:	8d ab       	std	Y+53, r24	; 0x35
    15f8:	9e ab       	std	Y+54, r25	; 0x36
    15fa:	af ab       	std	Y+55, r26	; 0x37
    15fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1600:	7e a9       	ldd	r23, Y+54	; 0x36
    1602:	8f a9       	ldd	r24, Y+55	; 0x37
    1604:	98 ad       	ldd	r25, Y+56	; 0x38
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a e7       	ldi	r20, 0x7A	; 122
    160c:	55 e4       	ldi	r21, 0x45	; 69
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	89 ab       	std	Y+49, r24	; 0x31
    1618:	9a ab       	std	Y+50, r25	; 0x32
    161a:	ab ab       	std	Y+51, r26	; 0x33
    161c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    161e:	69 a9       	ldd	r22, Y+49	; 0x31
    1620:	7a a9       	ldd	r23, Y+50	; 0x32
    1622:	8b a9       	ldd	r24, Y+51	; 0x33
    1624:	9c a9       	ldd	r25, Y+52	; 0x34
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <LCD_Init+0x314>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	98 ab       	std	Y+48, r25	; 0x30
    163c:	8f a7       	std	Y+47, r24	; 0x2f
    163e:	3f c0       	rjmp	.+126    	; 0x16be <LCD_Init+0x392>
	else if (__tmp > 65535)
    1640:	69 a9       	ldd	r22, Y+49	; 0x31
    1642:	7a a9       	ldd	r23, Y+50	; 0x32
    1644:	8b a9       	ldd	r24, Y+51	; 0x33
    1646:	9c a9       	ldd	r25, Y+52	; 0x34
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <LCD_Init+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	6d a9       	ldd	r22, Y+53	; 0x35
    165a:	7e a9       	ldd	r23, Y+54	; 0x36
    165c:	8f a9       	ldd	r24, Y+55	; 0x37
    165e:	98 ad       	ldd	r25, Y+56	; 0x38
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	98 ab       	std	Y+48, r25	; 0x30
    167e:	8f a7       	std	Y+47, r24	; 0x2f
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <LCD_Init+0x374>
    1682:	80 e9       	ldi	r24, 0x90	; 144
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	9e a7       	std	Y+46, r25	; 0x2e
    1688:	8d a7       	std	Y+45, r24	; 0x2d
    168a:	8d a5       	ldd	r24, Y+45	; 0x2d
    168c:	9e a5       	ldd	r25, Y+46	; 0x2e
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_Init+0x362>
    1692:	9e a7       	std	Y+46, r25	; 0x2e
    1694:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8f a5       	ldd	r24, Y+47	; 0x2f
    1698:	98 a9       	ldd	r25, Y+48	; 0x30
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	98 ab       	std	Y+48, r25	; 0x30
    169e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a2:	98 a9       	ldd	r25, Y+48	; 0x30
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <LCD_Init+0x356>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <LCD_Init+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	69 a9       	ldd	r22, Y+49	; 0x31
    16ac:	7a a9       	ldd	r23, Y+50	; 0x32
    16ae:	8b a9       	ldd	r24, Y+51	; 0x33
    16b0:	9c a9       	ldd	r25, Y+52	; 0x34
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	98 ab       	std	Y+48, r25	; 0x30
    16bc:	8f a7       	std	Y+47, r24	; 0x2f
    16be:	8f a5       	ldd	r24, Y+47	; 0x2f
    16c0:	98 a9       	ldd	r25, Y+48	; 0x30
    16c2:	9c a7       	std	Y+44, r25	; 0x2c
    16c4:	8b a7       	std	Y+43, r24	; 0x2b
    16c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_Init+0x39e>
    16ce:	9c a7       	std	Y+44, r25	; 0x2c
    16d0:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(3);

	LCD_Write_Command(lcd_Clear);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a0 e4       	ldi	r26, 0x40	; 64
    16de:	b0 e4       	ldi	r27, 0x40	; 64
    16e0:	8f a3       	std	Y+39, r24	; 0x27
    16e2:	98 a7       	std	Y+40, r25	; 0x28
    16e4:	a9 a7       	std	Y+41, r26	; 0x29
    16e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e8:	6f a1       	ldd	r22, Y+39	; 0x27
    16ea:	78 a5       	ldd	r23, Y+40	; 0x28
    16ec:	89 a5       	ldd	r24, Y+41	; 0x29
    16ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a e7       	ldi	r20, 0x7A	; 122
    16f6:	55 e4       	ldi	r21, 0x45	; 69
    16f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8b a3       	std	Y+35, r24	; 0x23
    1702:	9c a3       	std	Y+36, r25	; 0x24
    1704:	ad a3       	std	Y+37, r26	; 0x25
    1706:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1708:	6b a1       	ldd	r22, Y+35	; 0x23
    170a:	7c a1       	ldd	r23, Y+36	; 0x24
    170c:	8d a1       	ldd	r24, Y+37	; 0x25
    170e:	9e a1       	ldd	r25, Y+38	; 0x26
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	2c f4       	brge	.+10     	; 0x172a <LCD_Init+0x3fe>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9a a3       	std	Y+34, r25	; 0x22
    1726:	89 a3       	std	Y+33, r24	; 0x21
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <LCD_Init+0x47c>
	else if (__tmp > 65535)
    172a:	6b a1       	ldd	r22, Y+35	; 0x23
    172c:	7c a1       	ldd	r23, Y+36	; 0x24
    172e:	8d a1       	ldd	r24, Y+37	; 0x25
    1730:	9e a1       	ldd	r25, Y+38	; 0x26
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	57 e4       	ldi	r21, 0x47	; 71
    173a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	4c f5       	brge	.+82     	; 0x1794 <LCD_Init+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	6f a1       	ldd	r22, Y+39	; 0x27
    1744:	78 a5       	ldd	r23, Y+40	; 0x28
    1746:	89 a5       	ldd	r24, Y+41	; 0x29
    1748:	9a a5       	ldd	r25, Y+42	; 0x2a
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9a a3       	std	Y+34, r25	; 0x22
    1768:	89 a3       	std	Y+33, r24	; 0x21
    176a:	0f c0       	rjmp	.+30     	; 0x178a <LCD_Init+0x45e>
    176c:	80 e9       	ldi	r24, 0x90	; 144
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	98 a3       	std	Y+32, r25	; 0x20
    1772:	8f 8f       	std	Y+31, r24	; 0x1f
    1774:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1776:	98 a1       	ldd	r25, Y+32	; 0x20
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_Init+0x44c>
    177c:	98 a3       	std	Y+32, r25	; 0x20
    177e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	89 a1       	ldd	r24, Y+33	; 0x21
    1782:	9a a1       	ldd	r25, Y+34	; 0x22
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9a a3       	std	Y+34, r25	; 0x22
    1788:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	89 a1       	ldd	r24, Y+33	; 0x21
    178c:	9a a1       	ldd	r25, Y+34	; 0x22
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f7       	brne	.-38     	; 0x176c <LCD_Init+0x440>
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <LCD_Init+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	6b a1       	ldd	r22, Y+35	; 0x23
    1796:	7c a1       	ldd	r23, Y+36	; 0x24
    1798:	8d a1       	ldd	r24, Y+37	; 0x25
    179a:	9e a1       	ldd	r25, Y+38	; 0x26
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9a a3       	std	Y+34, r25	; 0x22
    17a6:	89 a3       	std	Y+33, r24	; 0x21
    17a8:	89 a1       	ldd	r24, Y+33	; 0x21
    17aa:	9a a1       	ldd	r25, Y+34	; 0x22
    17ac:	9e 8f       	std	Y+30, r25	; 0x1e
    17ae:	8d 8f       	std	Y+29, r24	; 0x1d
    17b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_Init+0x488>
    17b8:	9e 8f       	std	Y+30, r25	; 0x1e
    17ba:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(3);

	LCD_Write_Command(lcd_EntryMode);
    17bc:	86 e0       	ldi	r24, 0x06	; 6
    17be:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a0 e4       	ldi	r26, 0x40	; 64
    17c8:	b0 e4       	ldi	r27, 0x40	; 64
    17ca:	89 8f       	std	Y+25, r24	; 0x19
    17cc:	9a 8f       	std	Y+26, r25	; 0x1a
    17ce:	ab 8f       	std	Y+27, r26	; 0x1b
    17d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d2:	69 8d       	ldd	r22, Y+25	; 0x19
    17d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a e7       	ldi	r20, 0x7A	; 122
    17e0:	55 e4       	ldi	r21, 0x45	; 69
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	8d 8b       	std	Y+21, r24	; 0x15
    17ec:	9e 8b       	std	Y+22, r25	; 0x16
    17ee:	af 8b       	std	Y+23, r26	; 0x17
    17f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17f2:	6d 89       	ldd	r22, Y+21	; 0x15
    17f4:	7e 89       	ldd	r23, Y+22	; 0x16
    17f6:	8f 89       	ldd	r24, Y+23	; 0x17
    17f8:	98 8d       	ldd	r25, Y+24	; 0x18
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1806:	88 23       	and	r24, r24
    1808:	2c f4       	brge	.+10     	; 0x1814 <LCD_Init+0x4e8>
		__ticks = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9c 8b       	std	Y+20, r25	; 0x14
    1810:	8b 8b       	std	Y+19, r24	; 0x13
    1812:	3f c0       	rjmp	.+126    	; 0x1892 <LCD_Init+0x566>
	else if (__tmp > 65535)
    1814:	6d 89       	ldd	r22, Y+21	; 0x15
    1816:	7e 89       	ldd	r23, Y+22	; 0x16
    1818:	8f 89       	ldd	r24, Y+23	; 0x17
    181a:	98 8d       	ldd	r25, Y+24	; 0x18
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	57 e4       	ldi	r21, 0x47	; 71
    1824:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1828:	18 16       	cp	r1, r24
    182a:	4c f5       	brge	.+82     	; 0x187e <LCD_Init+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182c:	69 8d       	ldd	r22, Y+25	; 0x19
    182e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1830:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1832:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9c 8b       	std	Y+20, r25	; 0x14
    1852:	8b 8b       	std	Y+19, r24	; 0x13
    1854:	0f c0       	rjmp	.+30     	; 0x1874 <LCD_Init+0x548>
    1856:	80 e9       	ldi	r24, 0x90	; 144
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	9a 8b       	std	Y+18, r25	; 0x12
    185c:	89 8b       	std	Y+17, r24	; 0x11
    185e:	89 89       	ldd	r24, Y+17	; 0x11
    1860:	9a 89       	ldd	r25, Y+18	; 0x12
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCD_Init+0x536>
    1866:	9a 8b       	std	Y+18, r25	; 0x12
    1868:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186a:	8b 89       	ldd	r24, Y+19	; 0x13
    186c:	9c 89       	ldd	r25, Y+20	; 0x14
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	9c 8b       	std	Y+20, r25	; 0x14
    1872:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	8b 89       	ldd	r24, Y+19	; 0x13
    1876:	9c 89       	ldd	r25, Y+20	; 0x14
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	69 f7       	brne	.-38     	; 0x1856 <LCD_Init+0x52a>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <LCD_Init+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187e:	6d 89       	ldd	r22, Y+21	; 0x15
    1880:	7e 89       	ldd	r23, Y+22	; 0x16
    1882:	8f 89       	ldd	r24, Y+23	; 0x17
    1884:	98 8d       	ldd	r25, Y+24	; 0x18
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9c 8b       	std	Y+20, r25	; 0x14
    1890:	8b 8b       	std	Y+19, r24	; 0x13
    1892:	8b 89       	ldd	r24, Y+19	; 0x13
    1894:	9c 89       	ldd	r25, Y+20	; 0x14
    1896:	98 8b       	std	Y+16, r25	; 0x10
    1898:	8f 87       	std	Y+15, r24	; 0x0f
    189a:	8f 85       	ldd	r24, Y+15	; 0x0f
    189c:	98 89       	ldd	r25, Y+16	; 0x10
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_Init+0x572>
    18a2:	98 8b       	std	Y+16, r25	; 0x10
    18a4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(3);

	LCD_Write_Command(lcd_Home);
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a0 e4       	ldi	r26, 0x40	; 64
    18b2:	b0 e4       	ldi	r27, 0x40	; 64
    18b4:	8b 87       	std	Y+11, r24	; 0x0b
    18b6:	9c 87       	std	Y+12, r25	; 0x0c
    18b8:	ad 87       	std	Y+13, r26	; 0x0d
    18ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18be:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a e7       	ldi	r20, 0x7A	; 122
    18ca:	55 e4       	ldi	r21, 0x45	; 69
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8f 83       	std	Y+7, r24	; 0x07
    18d6:	98 87       	std	Y+8, r25	; 0x08
    18d8:	a9 87       	std	Y+9, r26	; 0x09
    18da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18dc:	6f 81       	ldd	r22, Y+7	; 0x07
    18de:	78 85       	ldd	r23, Y+8	; 0x08
    18e0:	89 85       	ldd	r24, Y+9	; 0x09
    18e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e8       	ldi	r20, 0x80	; 128
    18ea:	5f e3       	ldi	r21, 0x3F	; 63
    18ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f0:	88 23       	and	r24, r24
    18f2:	2c f4       	brge	.+10     	; 0x18fe <LCD_Init+0x5d2>
		__ticks = 1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    18fc:	3f c0       	rjmp	.+126    	; 0x197c <LCD_Init+0x650>
	else if (__tmp > 65535)
    18fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1900:	78 85       	ldd	r23, Y+8	; 0x08
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	9a 85       	ldd	r25, Y+10	; 0x0a
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	3f ef       	ldi	r19, 0xFF	; 255
    190a:	4f e7       	ldi	r20, 0x7F	; 127
    190c:	57 e4       	ldi	r21, 0x47	; 71
    190e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1912:	18 16       	cp	r1, r24
    1914:	4c f5       	brge	.+82     	; 0x1968 <LCD_Init+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1916:	6b 85       	ldd	r22, Y+11	; 0x0b
    1918:	7c 85       	ldd	r23, Y+12	; 0x0c
    191a:	8d 85       	ldd	r24, Y+13	; 0x0d
    191c:	9e 85       	ldd	r25, Y+14	; 0x0e
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e2       	ldi	r20, 0x20	; 32
    1924:	51 e4       	ldi	r21, 0x41	; 65
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	8d 83       	std	Y+5, r24	; 0x05
    193e:	0f c0       	rjmp	.+30     	; 0x195e <LCD_Init+0x632>
    1940:	80 e9       	ldi	r24, 0x90	; 144
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_Init+0x620>
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	69 f7       	brne	.-38     	; 0x1940 <LCD_Init+0x614>
    1966:	14 c0       	rjmp	.+40     	; 0x1990 <LCD_Init+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1968:	6f 81       	ldd	r22, Y+7	; 0x07
    196a:	78 85       	ldd	r23, Y+8	; 0x08
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	9a 81       	ldd	r25, Y+2	; 0x02
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_Init+0x65c>
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3);


}
    1990:	cc 5a       	subi	r28, 0xAC	; 172
    1992:	df 4f       	sbci	r29, 0xFF	; 255
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	08 95       	ret

000019a8 <LCD_Write_Command>:

void LCD_Write_Command(u8 Command){
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	e9 97       	sbiw	r28, 0x39	; 57
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	89 af       	std	Y+57, r24	; 0x39

	DIO_SetPinValue(CONTROL_PORT,RS_PIN,PIN_LOW);
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	62 e0       	ldi	r22, 0x02	; 2
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(CONTROL_PORT,RW_PIN,PIN_LOW);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	63 e0       	ldi	r22, 0x03	; 3
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_LOW);
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	64 e0       	ldi	r22, 0x04	; 4
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>


	DIO_SetPinValue(DATA_PORT,PIN_7,Get_Bit(Command,7));
    19dc:	89 ad       	ldd	r24, Y+57	; 0x39
    19de:	98 2f       	mov	r25, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	99 27       	eor	r25, r25
    19e4:	99 1f       	adc	r25, r25
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	67 e0       	ldi	r22, 0x07	; 7
    19ea:	49 2f       	mov	r20, r25
    19ec:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_6,Get_Bit(Command,6));
    19f0:	89 ad       	ldd	r24, Y+57	; 0x39
    19f2:	82 95       	swap	r24
    19f4:	86 95       	lsr	r24
    19f6:	86 95       	lsr	r24
    19f8:	83 70       	andi	r24, 0x03	; 3
    19fa:	98 2f       	mov	r25, r24
    19fc:	91 70       	andi	r25, 0x01	; 1
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	66 e0       	ldi	r22, 0x06	; 6
    1a02:	49 2f       	mov	r20, r25
    1a04:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_5,Get_Bit(Command,5));
    1a08:	89 ad       	ldd	r24, Y+57	; 0x39
    1a0a:	82 95       	swap	r24
    1a0c:	86 95       	lsr	r24
    1a0e:	87 70       	andi	r24, 0x07	; 7
    1a10:	98 2f       	mov	r25, r24
    1a12:	91 70       	andi	r25, 0x01	; 1
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	65 e0       	ldi	r22, 0x05	; 5
    1a18:	49 2f       	mov	r20, r25
    1a1a:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_4,Get_Bit(Command,4));
    1a1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a20:	82 95       	swap	r24
    1a22:	8f 70       	andi	r24, 0x0F	; 15
    1a24:	98 2f       	mov	r25, r24
    1a26:	91 70       	andi	r25, 0x01	; 1
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	64 e0       	ldi	r22, 0x04	; 4
    1a2c:	49 2f       	mov	r20, r25
    1a2e:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	//	DIO_SetPortValue(DATA_PORT,Command);

	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_HIGH);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	64 e0       	ldi	r22, 0x04	; 4
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a0 e4       	ldi	r26, 0x40	; 64
    1a42:	b0 e4       	ldi	r27, 0x40	; 64
    1a44:	8d ab       	std	Y+53, r24	; 0x35
    1a46:	9e ab       	std	Y+54, r25	; 0x36
    1a48:	af ab       	std	Y+55, r26	; 0x37
    1a4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a50:	8f a9       	ldd	r24, Y+55	; 0x37
    1a52:	98 ad       	ldd	r25, Y+56	; 0x38
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4a e7       	ldi	r20, 0x7A	; 122
    1a5a:	55 e4       	ldi	r21, 0x45	; 69
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	89 ab       	std	Y+49, r24	; 0x31
    1a66:	9a ab       	std	Y+50, r25	; 0x32
    1a68:	ab ab       	std	Y+51, r26	; 0x33
    1a6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a70:	8b a9       	ldd	r24, Y+51	; 0x33
    1a72:	9c a9       	ldd	r25, Y+52	; 0x34
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e8       	ldi	r20, 0x80	; 128
    1a7a:	5f e3       	ldi	r21, 0x3F	; 63
    1a7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a80:	88 23       	and	r24, r24
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <LCD_Write_Command+0xe6>
		__ticks = 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	98 ab       	std	Y+48, r25	; 0x30
    1a8a:	8f a7       	std	Y+47, r24	; 0x2f
    1a8c:	3f c0       	rjmp	.+126    	; 0x1b0c <LCD_Write_Command+0x164>
	else if (__tmp > 65535)
    1a8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a90:	7a a9       	ldd	r23, Y+50	; 0x32
    1a92:	8b a9       	ldd	r24, Y+51	; 0x33
    1a94:	9c a9       	ldd	r25, Y+52	; 0x34
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	57 e4       	ldi	r21, 0x47	; 71
    1a9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	4c f5       	brge	.+82     	; 0x1af8 <LCD_Write_Command+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa6:	6d a9       	ldd	r22, Y+53	; 0x35
    1aa8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aaa:	8f a9       	ldd	r24, Y+55	; 0x37
    1aac:	98 ad       	ldd	r25, Y+56	; 0x38
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e2       	ldi	r20, 0x20	; 32
    1ab4:	51 e4       	ldi	r21, 0x41	; 65
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	98 ab       	std	Y+48, r25	; 0x30
    1acc:	8f a7       	std	Y+47, r24	; 0x2f
    1ace:	0f c0       	rjmp	.+30     	; 0x1aee <LCD_Write_Command+0x146>
    1ad0:	80 e9       	ldi	r24, 0x90	; 144
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	9e a7       	std	Y+46, r25	; 0x2e
    1ad6:	8d a7       	std	Y+45, r24	; 0x2d
    1ad8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ada:	9e a5       	ldd	r25, Y+46	; 0x2e
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <LCD_Write_Command+0x134>
    1ae0:	9e a7       	std	Y+46, r25	; 0x2e
    1ae2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	98 ab       	std	Y+48, r25	; 0x30
    1aec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af0:	98 a9       	ldd	r25, Y+48	; 0x30
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	69 f7       	brne	.-38     	; 0x1ad0 <LCD_Write_Command+0x128>
    1af6:	14 c0       	rjmp	.+40     	; 0x1b20 <LCD_Write_Command+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af8:	69 a9       	ldd	r22, Y+49	; 0x31
    1afa:	7a a9       	ldd	r23, Y+50	; 0x32
    1afc:	8b a9       	ldd	r24, Y+51	; 0x33
    1afe:	9c a9       	ldd	r25, Y+52	; 0x34
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	98 ab       	std	Y+48, r25	; 0x30
    1b0a:	8f a7       	std	Y+47, r24	; 0x2f
    1b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b10:	9c a7       	std	Y+44, r25	; 0x2c
    1b12:	8b a7       	std	Y+43, r24	; 0x2b
    1b14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_Write_Command+0x170>
    1b1c:	9c a7       	std	Y+44, r25	; 0x2c
    1b1e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(3);
	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_LOW);
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	64 e0       	ldi	r22, 0x04	; 4
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	a0 e4       	ldi	r26, 0x40	; 64
    1b30:	b0 e4       	ldi	r27, 0x40	; 64
    1b32:	8f a3       	std	Y+39, r24	; 0x27
    1b34:	98 a7       	std	Y+40, r25	; 0x28
    1b36:	a9 a7       	std	Y+41, r26	; 0x29
    1b38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4a e7       	ldi	r20, 0x7A	; 122
    1b48:	55 e4       	ldi	r21, 0x45	; 69
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	8b a3       	std	Y+35, r24	; 0x23
    1b54:	9c a3       	std	Y+36, r25	; 0x24
    1b56:	ad a3       	std	Y+37, r26	; 0x25
    1b58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b60:	9e a1       	ldd	r25, Y+38	; 0x26
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <LCD_Write_Command+0x1d4>
		__ticks = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9a a3       	std	Y+34, r25	; 0x22
    1b78:	89 a3       	std	Y+33, r24	; 0x21
    1b7a:	3f c0       	rjmp	.+126    	; 0x1bfa <LCD_Write_Command+0x252>
	else if (__tmp > 65535)
    1b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b80:	8d a1       	ldd	r24, Y+37	; 0x25
    1b82:	9e a1       	ldd	r25, Y+38	; 0x26
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	57 e4       	ldi	r21, 0x47	; 71
    1b8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b90:	18 16       	cp	r1, r24
    1b92:	4c f5       	brge	.+82     	; 0x1be6 <LCD_Write_Command+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	6f a1       	ldd	r22, Y+39	; 0x27
    1b96:	78 a5       	ldd	r23, Y+40	; 0x28
    1b98:	89 a5       	ldd	r24, Y+41	; 0x29
    1b9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9a a3       	std	Y+34, r25	; 0x22
    1bba:	89 a3       	std	Y+33, r24	; 0x21
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <LCD_Write_Command+0x234>
    1bbe:	80 e9       	ldi	r24, 0x90	; 144
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	98 a3       	std	Y+32, r25	; 0x20
    1bc4:	8f 8f       	std	Y+31, r24	; 0x1f
    1bc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bc8:	98 a1       	ldd	r25, Y+32	; 0x20
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCD_Write_Command+0x222>
    1bce:	98 a3       	std	Y+32, r25	; 0x20
    1bd0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	9a a3       	std	Y+34, r25	; 0x22
    1bda:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bdc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bde:	9a a1       	ldd	r25, Y+34	; 0x22
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <LCD_Write_Command+0x216>
    1be4:	14 c0       	rjmp	.+40     	; 0x1c0e <LCD_Write_Command+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9a a3       	std	Y+34, r25	; 0x22
    1bf8:	89 a3       	std	Y+33, r24	; 0x21
    1bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfe:	9e 8f       	std	Y+30, r25	; 0x1e
    1c00:	8d 8f       	std	Y+29, r24	; 0x1d
    1c02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_Write_Command+0x25e>
    1c0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c0c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	DIO_SetPinValue(DATA_PORT,PIN_7,Get_Bit(Command,3));
    1c0e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c10:	86 95       	lsr	r24
    1c12:	86 95       	lsr	r24
    1c14:	86 95       	lsr	r24
    1c16:	98 2f       	mov	r25, r24
    1c18:	91 70       	andi	r25, 0x01	; 1
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	67 e0       	ldi	r22, 0x07	; 7
    1c1e:	49 2f       	mov	r20, r25
    1c20:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_6,Get_Bit(Command,2));
    1c24:	89 ad       	ldd	r24, Y+57	; 0x39
    1c26:	86 95       	lsr	r24
    1c28:	86 95       	lsr	r24
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	91 70       	andi	r25, 0x01	; 1
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	66 e0       	ldi	r22, 0x06	; 6
    1c32:	49 2f       	mov	r20, r25
    1c34:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_5,Get_Bit(Command,1));
    1c38:	89 ad       	ldd	r24, Y+57	; 0x39
    1c3a:	86 95       	lsr	r24
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	91 70       	andi	r25, 0x01	; 1
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	65 e0       	ldi	r22, 0x05	; 5
    1c44:	49 2f       	mov	r20, r25
    1c46:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_4,Get_Bit(Command,0));
    1c4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c4c:	98 2f       	mov	r25, r24
    1c4e:	91 70       	andi	r25, 0x01	; 1
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	64 e0       	ldi	r22, 0x04	; 4
    1c54:	49 2f       	mov	r20, r25
    1c56:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	//	DIO_SetPortValue(DATA_PORT,Command<<4);

	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_HIGH);
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	64 e0       	ldi	r22, 0x04	; 4
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e4       	ldi	r26, 0x40	; 64
    1c6a:	b0 e4       	ldi	r27, 0x40	; 64
    1c6c:	89 8f       	std	Y+25, r24	; 0x19
    1c6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c70:	ab 8f       	std	Y+27, r26	; 0x1b
    1c72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	69 8d       	ldd	r22, Y+25	; 0x19
    1c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a e7       	ldi	r20, 0x7A	; 122
    1c82:	55 e4       	ldi	r21, 0x45	; 69
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8d 8b       	std	Y+21, r24	; 0x15
    1c8e:	9e 8b       	std	Y+22, r25	; 0x16
    1c90:	af 8b       	std	Y+23, r26	; 0x17
    1c92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c94:	6d 89       	ldd	r22, Y+21	; 0x15
    1c96:	7e 89       	ldd	r23, Y+22	; 0x16
    1c98:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <LCD_Write_Command+0x30e>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9c 8b       	std	Y+20, r25	; 0x14
    1cb2:	8b 8b       	std	Y+19, r24	; 0x13
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <LCD_Write_Command+0x38c>
	else if (__tmp > 65535)
    1cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cba:	8f 89       	ldd	r24, Y+23	; 0x17
    1cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <LCD_Write_Command+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9c 8b       	std	Y+20, r25	; 0x14
    1cf4:	8b 8b       	std	Y+19, r24	; 0x13
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <LCD_Write_Command+0x36e>
    1cf8:	80 e9       	ldi	r24, 0x90	; 144
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	89 8b       	std	Y+17, r24	; 0x11
    1d00:	89 89       	ldd	r24, Y+17	; 0x11
    1d02:	9a 89       	ldd	r25, Y+18	; 0x12
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_Write_Command+0x35c>
    1d08:	9a 8b       	std	Y+18, r25	; 0x12
    1d0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8b 89       	ldd	r24, Y+19	; 0x13
    1d18:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <LCD_Write_Command+0x350>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <LCD_Write_Command+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6d 89       	ldd	r22, Y+21	; 0x15
    1d22:	7e 89       	ldd	r23, Y+22	; 0x16
    1d24:	8f 89       	ldd	r24, Y+23	; 0x17
    1d26:	98 8d       	ldd	r25, Y+24	; 0x18
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	98 8b       	std	Y+16, r25	; 0x10
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
    1d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3e:	98 89       	ldd	r25, Y+16	; 0x10
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_Write_Command+0x398>
    1d44:	98 8b       	std	Y+16, r25	; 0x10
    1d46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_LOW);
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	64 e0       	ldi	r22, 0x04	; 4
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a0 e4       	ldi	r26, 0x40	; 64
    1d58:	b0 e4       	ldi	r27, 0x40	; 64
    1d5a:	8b 87       	std	Y+11, r24	; 0x0b
    1d5c:	9c 87       	std	Y+12, r25	; 0x0c
    1d5e:	ad 87       	std	Y+13, r26	; 0x0d
    1d60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a e7       	ldi	r20, 0x7A	; 122
    1d70:	55 e4       	ldi	r21, 0x45	; 69
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8f 83       	std	Y+7, r24	; 0x07
    1d7c:	98 87       	std	Y+8, r25	; 0x08
    1d7e:	a9 87       	std	Y+9, r26	; 0x09
    1d80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <LCD_Write_Command+0x3fc>
		__ticks = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	3f c0       	rjmp	.+126    	; 0x1e22 <LCD_Write_Command+0x47a>
	else if (__tmp > 65535)
    1da4:	6f 81       	ldd	r22, Y+7	; 0x07
    1da6:	78 85       	ldd	r23, Y+8	; 0x08
    1da8:	89 85       	ldd	r24, Y+9	; 0x09
    1daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	4c f5       	brge	.+82     	; 0x1e0e <LCD_Write_Command+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <LCD_Write_Command+0x45c>
    1de6:	80 e9       	ldi	r24, 0x90	; 144
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_Write_Command+0x44a>
    1df6:	9c 83       	std	Y+4, r25	; 0x04
    1df8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <LCD_Write_Command+0x43e>
    1e0c:	14 c0       	rjmp	.+40     	; 0x1e36 <LCD_Write_Command+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_Write_Command+0x486>
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    1e36:	e9 96       	adiw	r28, 0x39	; 57
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <LCD_Write_Data>:

void LCD_Write_Data(u8 Data){
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	e9 97       	sbiw	r28, 0x39	; 57
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	89 af       	std	Y+57, r24	; 0x39

	DIO_SetPinValue(CONTROL_PORT,RS_PIN,PIN_HIGH);
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	62 e0       	ldi	r22, 0x02	; 2
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(CONTROL_PORT,RW_PIN,PIN_LOW);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	63 e0       	ldi	r22, 0x03	; 3
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_LOW);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	64 e0       	ldi	r22, 0x04	; 4
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>

	DIO_SetPinValue(DATA_PORT,PIN_7,Get_Bit(Data,7));
    1e7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e7e:	98 2f       	mov	r25, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	99 27       	eor	r25, r25
    1e84:	99 1f       	adc	r25, r25
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	67 e0       	ldi	r22, 0x07	; 7
    1e8a:	49 2f       	mov	r20, r25
    1e8c:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_6,Get_Bit(Data,6));
    1e90:	89 ad       	ldd	r24, Y+57	; 0x39
    1e92:	82 95       	swap	r24
    1e94:	86 95       	lsr	r24
    1e96:	86 95       	lsr	r24
    1e98:	83 70       	andi	r24, 0x03	; 3
    1e9a:	98 2f       	mov	r25, r24
    1e9c:	91 70       	andi	r25, 0x01	; 1
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	66 e0       	ldi	r22, 0x06	; 6
    1ea2:	49 2f       	mov	r20, r25
    1ea4:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_5,Get_Bit(Data,5));
    1ea8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eaa:	82 95       	swap	r24
    1eac:	86 95       	lsr	r24
    1eae:	87 70       	andi	r24, 0x07	; 7
    1eb0:	98 2f       	mov	r25, r24
    1eb2:	91 70       	andi	r25, 0x01	; 1
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	65 e0       	ldi	r22, 0x05	; 5
    1eb8:	49 2f       	mov	r20, r25
    1eba:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_4,Get_Bit(Data,4));
    1ebe:	89 ad       	ldd	r24, Y+57	; 0x39
    1ec0:	82 95       	swap	r24
    1ec2:	8f 70       	andi	r24, 0x0F	; 15
    1ec4:	98 2f       	mov	r25, r24
    1ec6:	91 70       	andi	r25, 0x01	; 1
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	64 e0       	ldi	r22, 0x04	; 4
    1ecc:	49 2f       	mov	r20, r25
    1ece:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	//	DIO_SetPortValue(DATA_PORT,Data);


	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_HIGH);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	64 e0       	ldi	r22, 0x04	; 4
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a0 e4       	ldi	r26, 0x40	; 64
    1ee2:	b0 e4       	ldi	r27, 0x40	; 64
    1ee4:	8d ab       	std	Y+53, r24	; 0x35
    1ee6:	9e ab       	std	Y+54, r25	; 0x36
    1ee8:	af ab       	std	Y+55, r26	; 0x37
    1eea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eec:	6d a9       	ldd	r22, Y+53	; 0x35
    1eee:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a e7       	ldi	r20, 0x7A	; 122
    1efa:	55 e4       	ldi	r21, 0x45	; 69
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	89 ab       	std	Y+49, r24	; 0x31
    1f06:	9a ab       	std	Y+50, r25	; 0x32
    1f08:	ab ab       	std	Y+51, r26	; 0x33
    1f0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f10:	8b a9       	ldd	r24, Y+51	; 0x33
    1f12:	9c a9       	ldd	r25, Y+52	; 0x34
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f20:	88 23       	and	r24, r24
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <LCD_Write_Data+0xe6>
		__ticks = 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	98 ab       	std	Y+48, r25	; 0x30
    1f2a:	8f a7       	std	Y+47, r24	; 0x2f
    1f2c:	3f c0       	rjmp	.+126    	; 0x1fac <LCD_Write_Data+0x164>
	else if (__tmp > 65535)
    1f2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f30:	7a a9       	ldd	r23, Y+50	; 0x32
    1f32:	8b a9       	ldd	r24, Y+51	; 0x33
    1f34:	9c a9       	ldd	r25, Y+52	; 0x34
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	3f ef       	ldi	r19, 0xFF	; 255
    1f3a:	4f e7       	ldi	r20, 0x7F	; 127
    1f3c:	57 e4       	ldi	r21, 0x47	; 71
    1f3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f42:	18 16       	cp	r1, r24
    1f44:	4c f5       	brge	.+82     	; 0x1f98 <LCD_Write_Data+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f46:	6d a9       	ldd	r22, Y+53	; 0x35
    1f48:	7e a9       	ldd	r23, Y+54	; 0x36
    1f4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	51 e4       	ldi	r21, 0x41	; 65
    1f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	98 ab       	std	Y+48, r25	; 0x30
    1f6c:	8f a7       	std	Y+47, r24	; 0x2f
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <LCD_Write_Data+0x146>
    1f70:	80 e9       	ldi	r24, 0x90	; 144
    1f72:	91 e0       	ldi	r25, 0x01	; 1
    1f74:	9e a7       	std	Y+46, r25	; 0x2e
    1f76:	8d a7       	std	Y+45, r24	; 0x2d
    1f78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_Write_Data+0x134>
    1f80:	9e a7       	std	Y+46, r25	; 0x2e
    1f82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f86:	98 a9       	ldd	r25, Y+48	; 0x30
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	98 ab       	std	Y+48, r25	; 0x30
    1f8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f90:	98 a9       	ldd	r25, Y+48	; 0x30
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	69 f7       	brne	.-38     	; 0x1f70 <LCD_Write_Data+0x128>
    1f96:	14 c0       	rjmp	.+40     	; 0x1fc0 <LCD_Write_Data+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	98 ab       	std	Y+48, r25	; 0x30
    1faa:	8f a7       	std	Y+47, r24	; 0x2f
    1fac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fae:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb0:	9c a7       	std	Y+44, r25	; 0x2c
    1fb2:	8b a7       	std	Y+43, r24	; 0x2b
    1fb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_Write_Data+0x170>
    1fbc:	9c a7       	std	Y+44, r25	; 0x2c
    1fbe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(3);
	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_LOW);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	64 e0       	ldi	r22, 0x04	; 4
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e4       	ldi	r26, 0x40	; 64
    1fd0:	b0 e4       	ldi	r27, 0x40	; 64
    1fd2:	8f a3       	std	Y+39, r24	; 0x27
    1fd4:	98 a7       	std	Y+40, r25	; 0x28
    1fd6:	a9 a7       	std	Y+41, r26	; 0x29
    1fd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	6f a1       	ldd	r22, Y+39	; 0x27
    1fdc:	78 a5       	ldd	r23, Y+40	; 0x28
    1fde:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a e7       	ldi	r20, 0x7A	; 122
    1fe8:	55 e4       	ldi	r21, 0x45	; 69
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8b a3       	std	Y+35, r24	; 0x23
    1ff4:	9c a3       	std	Y+36, r25	; 0x24
    1ff6:	ad a3       	std	Y+37, r26	; 0x25
    1ff8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ffa:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    2000:	9e a1       	ldd	r25, Y+38	; 0x26
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <LCD_Write_Data+0x1d4>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9a a3       	std	Y+34, r25	; 0x22
    2018:	89 a3       	std	Y+33, r24	; 0x21
    201a:	3f c0       	rjmp	.+126    	; 0x209a <LCD_Write_Data+0x252>
	else if (__tmp > 65535)
    201c:	6b a1       	ldd	r22, Y+35	; 0x23
    201e:	7c a1       	ldd	r23, Y+36	; 0x24
    2020:	8d a1       	ldd	r24, Y+37	; 0x25
    2022:	9e a1       	ldd	r25, Y+38	; 0x26
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <LCD_Write_Data+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	6f a1       	ldd	r22, Y+39	; 0x27
    2036:	78 a5       	ldd	r23, Y+40	; 0x28
    2038:	89 a5       	ldd	r24, Y+41	; 0x29
    203a:	9a a5       	ldd	r25, Y+42	; 0x2a
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9a a3       	std	Y+34, r25	; 0x22
    205a:	89 a3       	std	Y+33, r24	; 0x21
    205c:	0f c0       	rjmp	.+30     	; 0x207c <LCD_Write_Data+0x234>
    205e:	80 e9       	ldi	r24, 0x90	; 144
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	98 a3       	std	Y+32, r25	; 0x20
    2064:	8f 8f       	std	Y+31, r24	; 0x1f
    2066:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2068:	98 a1       	ldd	r25, Y+32	; 0x20
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_Write_Data+0x222>
    206e:	98 a3       	std	Y+32, r25	; 0x20
    2070:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	89 a1       	ldd	r24, Y+33	; 0x21
    2074:	9a a1       	ldd	r25, Y+34	; 0x22
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9a a3       	std	Y+34, r25	; 0x22
    207a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	89 a1       	ldd	r24, Y+33	; 0x21
    207e:	9a a1       	ldd	r25, Y+34	; 0x22
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <LCD_Write_Data+0x216>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <LCD_Write_Data+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	6b a1       	ldd	r22, Y+35	; 0x23
    2088:	7c a1       	ldd	r23, Y+36	; 0x24
    208a:	8d a1       	ldd	r24, Y+37	; 0x25
    208c:	9e a1       	ldd	r25, Y+38	; 0x26
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9a a3       	std	Y+34, r25	; 0x22
    2098:	89 a3       	std	Y+33, r24	; 0x21
    209a:	89 a1       	ldd	r24, Y+33	; 0x21
    209c:	9a a1       	ldd	r25, Y+34	; 0x22
    209e:	9e 8f       	std	Y+30, r25	; 0x1e
    20a0:	8d 8f       	std	Y+29, r24	; 0x1d
    20a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_Write_Data+0x25e>
    20aa:	9e 8f       	std	Y+30, r25	; 0x1e
    20ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	DIO_SetPinValue(DATA_PORT,PIN_7,Get_Bit(Data,3));
    20ae:	89 ad       	ldd	r24, Y+57	; 0x39
    20b0:	86 95       	lsr	r24
    20b2:	86 95       	lsr	r24
    20b4:	86 95       	lsr	r24
    20b6:	98 2f       	mov	r25, r24
    20b8:	91 70       	andi	r25, 0x01	; 1
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	67 e0       	ldi	r22, 0x07	; 7
    20be:	49 2f       	mov	r20, r25
    20c0:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_6,Get_Bit(Data,2));
    20c4:	89 ad       	ldd	r24, Y+57	; 0x39
    20c6:	86 95       	lsr	r24
    20c8:	86 95       	lsr	r24
    20ca:	98 2f       	mov	r25, r24
    20cc:	91 70       	andi	r25, 0x01	; 1
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	66 e0       	ldi	r22, 0x06	; 6
    20d2:	49 2f       	mov	r20, r25
    20d4:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_5,Get_Bit(Data,1));
    20d8:	89 ad       	ldd	r24, Y+57	; 0x39
    20da:	86 95       	lsr	r24
    20dc:	98 2f       	mov	r25, r24
    20de:	91 70       	andi	r25, 0x01	; 1
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	65 e0       	ldi	r22, 0x05	; 5
    20e4:	49 2f       	mov	r20, r25
    20e6:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	DIO_SetPinValue(DATA_PORT,PIN_4,Get_Bit(Data,0));
    20ea:	89 ad       	ldd	r24, Y+57	; 0x39
    20ec:	98 2f       	mov	r25, r24
    20ee:	91 70       	andi	r25, 0x01	; 1
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	64 e0       	ldi	r22, 0x04	; 4
    20f4:	49 2f       	mov	r20, r25
    20f6:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
	//	DIO_SetPortValue(DATA_PORT,Data<<4);


	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_HIGH);
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	64 e0       	ldi	r22, 0x04	; 4
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e4       	ldi	r26, 0x40	; 64
    210a:	b0 e4       	ldi	r27, 0x40	; 64
    210c:	89 8f       	std	Y+25, r24	; 0x19
    210e:	9a 8f       	std	Y+26, r25	; 0x1a
    2110:	ab 8f       	std	Y+27, r26	; 0x1b
    2112:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2114:	69 8d       	ldd	r22, Y+25	; 0x19
    2116:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2118:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a e7       	ldi	r20, 0x7A	; 122
    2122:	55 e4       	ldi	r21, 0x45	; 69
    2124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	8d 8b       	std	Y+21, r24	; 0x15
    212e:	9e 8b       	std	Y+22, r25	; 0x16
    2130:	af 8b       	std	Y+23, r26	; 0x17
    2132:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2134:	6d 89       	ldd	r22, Y+21	; 0x15
    2136:	7e 89       	ldd	r23, Y+22	; 0x16
    2138:	8f 89       	ldd	r24, Y+23	; 0x17
    213a:	98 8d       	ldd	r25, Y+24	; 0x18
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e8       	ldi	r20, 0x80	; 128
    2142:	5f e3       	ldi	r21, 0x3F	; 63
    2144:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2148:	88 23       	and	r24, r24
    214a:	2c f4       	brge	.+10     	; 0x2156 <LCD_Write_Data+0x30e>
		__ticks = 1;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9c 8b       	std	Y+20, r25	; 0x14
    2152:	8b 8b       	std	Y+19, r24	; 0x13
    2154:	3f c0       	rjmp	.+126    	; 0x21d4 <LCD_Write_Data+0x38c>
	else if (__tmp > 65535)
    2156:	6d 89       	ldd	r22, Y+21	; 0x15
    2158:	7e 89       	ldd	r23, Y+22	; 0x16
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216a:	18 16       	cp	r1, r24
    216c:	4c f5       	brge	.+82     	; 0x21c0 <LCD_Write_Data+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216e:	69 8d       	ldd	r22, Y+25	; 0x19
    2170:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2172:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2174:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e2       	ldi	r20, 0x20	; 32
    217c:	51 e4       	ldi	r21, 0x41	; 65
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	bc 01       	movw	r22, r24
    2188:	cd 01       	movw	r24, r26
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	9c 8b       	std	Y+20, r25	; 0x14
    2194:	8b 8b       	std	Y+19, r24	; 0x13
    2196:	0f c0       	rjmp	.+30     	; 0x21b6 <LCD_Write_Data+0x36e>
    2198:	80 e9       	ldi	r24, 0x90	; 144
    219a:	91 e0       	ldi	r25, 0x01	; 1
    219c:	9a 8b       	std	Y+18, r25	; 0x12
    219e:	89 8b       	std	Y+17, r24	; 0x11
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	9a 89       	ldd	r25, Y+18	; 0x12
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_Write_Data+0x35c>
    21a8:	9a 8b       	std	Y+18, r25	; 0x12
    21aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ac:	8b 89       	ldd	r24, Y+19	; 0x13
    21ae:	9c 89       	ldd	r25, Y+20	; 0x14
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	9c 8b       	std	Y+20, r25	; 0x14
    21b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b6:	8b 89       	ldd	r24, Y+19	; 0x13
    21b8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	69 f7       	brne	.-38     	; 0x2198 <LCD_Write_Data+0x350>
    21be:	14 c0       	rjmp	.+40     	; 0x21e8 <LCD_Write_Data+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c0:	6d 89       	ldd	r22, Y+21	; 0x15
    21c2:	7e 89       	ldd	r23, Y+22	; 0x16
    21c4:	8f 89       	ldd	r24, Y+23	; 0x17
    21c6:	98 8d       	ldd	r25, Y+24	; 0x18
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	9c 8b       	std	Y+20, r25	; 0x14
    21d2:	8b 8b       	std	Y+19, r24	; 0x13
    21d4:	8b 89       	ldd	r24, Y+19	; 0x13
    21d6:	9c 89       	ldd	r25, Y+20	; 0x14
    21d8:	98 8b       	std	Y+16, r25	; 0x10
    21da:	8f 87       	std	Y+15, r24	; 0x0f
    21dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21de:	98 89       	ldd	r25, Y+16	; 0x10
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <LCD_Write_Data+0x398>
    21e4:	98 8b       	std	Y+16, r25	; 0x10
    21e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	DIO_SetPinValue(CONTROL_PORT,E_PIN,PIN_LOW);
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	64 e0       	ldi	r22, 0x04	; 4
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a0 e4       	ldi	r26, 0x40	; 64
    21f8:	b0 e4       	ldi	r27, 0x40	; 64
    21fa:	8b 87       	std	Y+11, r24	; 0x0b
    21fc:	9c 87       	std	Y+12, r25	; 0x0c
    21fe:	ad 87       	std	Y+13, r26	; 0x0d
    2200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2202:	6b 85       	ldd	r22, Y+11	; 0x0b
    2204:	7c 85       	ldd	r23, Y+12	; 0x0c
    2206:	8d 85       	ldd	r24, Y+13	; 0x0d
    2208:	9e 85       	ldd	r25, Y+14	; 0x0e
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	4a e7       	ldi	r20, 0x7A	; 122
    2210:	55 e4       	ldi	r21, 0x45	; 69
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	8f 83       	std	Y+7, r24	; 0x07
    221c:	98 87       	std	Y+8, r25	; 0x08
    221e:	a9 87       	std	Y+9, r26	; 0x09
    2220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2236:	88 23       	and	r24, r24
    2238:	2c f4       	brge	.+10     	; 0x2244 <LCD_Write_Data+0x3fc>
		__ticks = 1;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	3f c0       	rjmp	.+126    	; 0x22c2 <LCD_Write_Data+0x47a>
	else if (__tmp > 65535)
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	78 85       	ldd	r23, Y+8	; 0x08
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	3f ef       	ldi	r19, 0xFF	; 255
    2250:	4f e7       	ldi	r20, 0x7F	; 127
    2252:	57 e4       	ldi	r21, 0x47	; 71
    2254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2258:	18 16       	cp	r1, r24
    225a:	4c f5       	brge	.+82     	; 0x22ae <LCD_Write_Data+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225c:	6b 85       	ldd	r22, Y+11	; 0x0b
    225e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2260:	8d 85       	ldd	r24, Y+13	; 0x0d
    2262:	9e 85       	ldd	r25, Y+14	; 0x0e
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e2       	ldi	r20, 0x20	; 32
    226a:	51 e4       	ldi	r21, 0x41	; 65
    226c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	0f c0       	rjmp	.+30     	; 0x22a4 <LCD_Write_Data+0x45c>
    2286:	80 e9       	ldi	r24, 0x90	; 144
    2288:	91 e0       	ldi	r25, 0x01	; 1
    228a:	9c 83       	std	Y+4, r25	; 0x04
    228c:	8b 83       	std	Y+3, r24	; 0x03
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <LCD_Write_Data+0x44a>
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a4:	8d 81       	ldd	r24, Y+5	; 0x05
    22a6:	9e 81       	ldd	r25, Y+6	; 0x06
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	69 f7       	brne	.-38     	; 0x2286 <LCD_Write_Data+0x43e>
    22ac:	14 c0       	rjmp	.+40     	; 0x22d6 <LCD_Write_Data+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	9a 81       	ldd	r25, Y+2	; 0x02
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <LCD_Write_Data+0x486>
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    22d6:	e9 96       	adiw	r28, 0x39	; 57
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <LCD_Write_String>:

void LCD_Write_String(u8 * Str, u8 Length){
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <LCD_Write_String+0x6>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <LCD_Write_String+0x8>
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	6c 83       	std	Y+4, r22	; 0x04
	u8 i=0;
    22fa:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<Length;i++){
    22fc:	19 82       	std	Y+1, r1	; 0x01
    22fe:	0e c0       	rjmp	.+28     	; 0x231c <LCD_Write_String+0x34>
		LCD_Write_Data(Str[i]);
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	9b 81       	ldd	r25, Y+3	; 0x03
    230a:	fc 01       	movw	r30, r24
    230c:	e2 0f       	add	r30, r18
    230e:	f3 1f       	adc	r31, r19
    2310:	80 81       	ld	r24, Z
    2312:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	_delay_ms(3);
}

void LCD_Write_String(u8 * Str, u8 Length){
	u8 i=0;
	for(i=0;i<Length;i++){
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	99 81       	ldd	r25, Y+1	; 0x01
    231e:	8c 81       	ldd	r24, Y+4	; 0x04
    2320:	98 17       	cp	r25, r24
    2322:	70 f3       	brcs	.-36     	; 0x2300 <LCD_Write_String+0x18>
		LCD_Write_Data(Str[i]);
	}
}
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <LCD_Go_To>:

void LCD_Go_To(u8 y,u8 x){
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	00 d0       	rcall	.+0      	; 0x2338 <LCD_Go_To+0x6>
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	6a 83       	std	Y+2, r22	; 0x02
	LCD_Write_Command((128+(y*0x40)+x));
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	02 96       	adiw	r24, 0x02	; 2
    2348:	00 24       	eor	r0, r0
    234a:	96 95       	lsr	r25
    234c:	87 95       	ror	r24
    234e:	07 94       	ror	r0
    2350:	96 95       	lsr	r25
    2352:	87 95       	ror	r24
    2354:	07 94       	ror	r0
    2356:	98 2f       	mov	r25, r24
    2358:	80 2d       	mov	r24, r0
    235a:	98 2f       	mov	r25, r24
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	89 0f       	add	r24, r25
    2360:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>
}
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <TIMER0_Init>:
#include "TIMER_config.h"
#include "TIMER_interface.h"

void (* TIMER0_OVF_CALLBACK_PTR) (void)=NULL;

void TIMER0_Init(void){
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	//Select mode
	Clr_Bit(TCCR0_register,WGM00);
    2376:	a3 e5       	ldi	r26, 0x53	; 83
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e3 e5       	ldi	r30, 0x53	; 83
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	8f 7b       	andi	r24, 0xBF	; 191
    2382:	8c 93       	st	X, r24
	Clr_Bit(TCCR0_register,WGM01);
    2384:	a3 e5       	ldi	r26, 0x53	; 83
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e3 e5       	ldi	r30, 0x53	; 83
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	87 7f       	andi	r24, 0xF7	; 247
    2390:	8c 93       	st	X, r24

	//set output mode
	Clr_Bit(TCCR0_register,COM00);
    2392:	a3 e5       	ldi	r26, 0x53	; 83
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	e3 e5       	ldi	r30, 0x53	; 83
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	8f 7e       	andi	r24, 0xEF	; 239
    239e:	8c 93       	st	X, r24
	Clr_Bit(TCCR0_register,COM01);
    23a0:	a3 e5       	ldi	r26, 0x53	; 83
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e3 e5       	ldi	r30, 0x53	; 83
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	8f 7d       	andi	r24, 0xDF	; 223
    23ac:	8c 93       	st	X, r24

	//select prescalar
	Set_Bit(TCCR0_register,CS00);
    23ae:	a3 e5       	ldi	r26, 0x53	; 83
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e3 e5       	ldi	r30, 0x53	; 83
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	81 60       	ori	r24, 0x01	; 1
    23ba:	8c 93       	st	X, r24
	Clr_Bit(TCCR0_register,CS01);
    23bc:	a3 e5       	ldi	r26, 0x53	; 83
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e3 e5       	ldi	r30, 0x53	; 83
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8d 7f       	andi	r24, 0xFD	; 253
    23c8:	8c 93       	st	X, r24
	Set_Bit(TCCR0_register,CS02);
    23ca:	a3 e5       	ldi	r26, 0x53	; 83
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e3 e5       	ldi	r30, 0x53	; 83
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	84 60       	ori	r24, 0x04	; 4
    23d6:	8c 93       	st	X, r24

}
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <TIMER0_OVF_Interrupt_Enable>:

void TIMER0_OVF_Interrupt_Enable(void){
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK_register,TOIE0);
    23e6:	a9 e5       	ldi	r26, 0x59	; 89
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e9 e5       	ldi	r30, 0x59	; 89
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	81 60       	ori	r24, 0x01	; 1
    23f2:	8c 93       	st	X, r24
}
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <TIMER0_OVF_Interrupt_Disable>:
void TIMER0_OVF_Interrupt_Disable(void){
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK_register,TOIE0);
    2402:	a9 e5       	ldi	r26, 0x59	; 89
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e9 e5       	ldi	r30, 0x59	; 89
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	8e 7f       	andi	r24, 0xFE	; 254
    240e:	8c 93       	st	X, r24
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <TIMER0_Set_TCNT0_Register>:
void TIMER0_Set_TCNT0_Register(u8 Value){
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	0f 92       	push	r0
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	89 83       	std	Y+1, r24	; 0x01

	TCNT0_register=Value;
    2422:	e2 e5       	ldi	r30, 0x52	; 82
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	80 83       	st	Z, r24

}
    242a:	0f 90       	pop	r0
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <TIMER0_OVF_Set_Callback_Address>:
void TIMER0_OVF_Set_Callback_Address(void (*PTR) (void)){
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	00 d0       	rcall	.+0      	; 0x2438 <TIMER0_OVF_Set_Callback_Address+0x6>
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OVF_CALLBACK_PTR=PTR;
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	90 93 85 00 	sts	0x0085, r25
    2448:	80 93 84 00 	sts	0x0084, r24
}
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <__vector_11>:
void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ;
void __vector_11 (void){
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	0f 92       	push	r0
    245e:	11 24       	eor	r1, r1
    2460:	2f 93       	push	r18
    2462:	3f 93       	push	r19
    2464:	4f 93       	push	r20
    2466:	5f 93       	push	r21
    2468:	6f 93       	push	r22
    246a:	7f 93       	push	r23
    246c:	8f 93       	push	r24
    246e:	9f 93       	push	r25
    2470:	af 93       	push	r26
    2472:	bf 93       	push	r27
    2474:	ef 93       	push	r30
    2476:	ff 93       	push	r31
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_OVF_CALLBACK_PTR();
    2480:	e0 91 84 00 	lds	r30, 0x0084
    2484:	f0 91 85 00 	lds	r31, 0x0085
    2488:	09 95       	icall
}
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	ff 91       	pop	r31
    2490:	ef 91       	pop	r30
    2492:	bf 91       	pop	r27
    2494:	af 91       	pop	r26
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	7f 91       	pop	r23
    249c:	6f 91       	pop	r22
    249e:	5f 91       	pop	r21
    24a0:	4f 91       	pop	r20
    24a2:	3f 91       	pop	r19
    24a4:	2f 91       	pop	r18
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	0f 90       	pop	r0
    24ac:	1f 90       	pop	r1
    24ae:	18 95       	reti

000024b0 <TIMER1_Init>:
void (* TIMER1_CTC_A_CALLBACK_PTR) (void)=NULL;
void (* TIMER1_CTC_B_CALLBACK_PTR) (void)=NULL;
void (* TIMER1_OVF_CALLBACK_PTR) (void)=NULL;
void (* TIMER1_ICI_CALLBACK_PTR) (void)=NULL;

void TIMER1_Init(void){
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
	//selsect mode
	Clr_Bit(TCCR1B_register,WGM12);
    24b8:	ae e4       	ldi	r26, 0x4E	; 78
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	ee e4       	ldi	r30, 0x4E	; 78
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	87 7f       	andi	r24, 0xF7	; 247
    24c4:	8c 93       	st	X, r24
	Clr_Bit(TCCR1B_register,WGM13);
    24c6:	ae e4       	ldi	r26, 0x4E	; 78
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	ee e4       	ldi	r30, 0x4E	; 78
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8f 7e       	andi	r24, 0xEF	; 239
    24d2:	8c 93       	st	X, r24
	Clr_Bit(TCCR1A_register,WGM10);
    24d4:	af e4       	ldi	r26, 0x4F	; 79
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	ef e4       	ldi	r30, 0x4F	; 79
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	8e 7f       	andi	r24, 0xFE	; 254
    24e0:	8c 93       	st	X, r24
	Clr_Bit(TCCR1A_register,WGM11);
    24e2:	af e4       	ldi	r26, 0x4F	; 79
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	ef e4       	ldi	r30, 0x4F	; 79
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	8d 7f       	andi	r24, 0xFD	; 253
    24ee:	8c 93       	st	X, r24

	Clr_Bit(TCCR1A_register,COM1A0);
    24f0:	af e4       	ldi	r26, 0x4F	; 79
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	ef e4       	ldi	r30, 0x4F	; 79
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	8f 7b       	andi	r24, 0xBF	; 191
    24fc:	8c 93       	st	X, r24
	Clr_Bit(TCCR1A_register,COM1A1);
    24fe:	af e4       	ldi	r26, 0x4F	; 79
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ef e4       	ldi	r30, 0x4F	; 79
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	8f 77       	andi	r24, 0x7F	; 127
    250a:	8c 93       	st	X, r24
	Clr_Bit(TCCR1A_register,COM1B0);
    250c:	af e4       	ldi	r26, 0x4F	; 79
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	ef e4       	ldi	r30, 0x4F	; 79
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	8f 7e       	andi	r24, 0xEF	; 239
    2518:	8c 93       	st	X, r24
	Clr_Bit(TCCR1A_register,COM1A1);
    251a:	af e4       	ldi	r26, 0x4F	; 79
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	ef e4       	ldi	r30, 0x4F	; 79
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	8f 77       	andi	r24, 0x7F	; 127
    2526:	8c 93       	st	X, r24

	Set_Bit(TCCR1B_register,CS11);
    2528:	ae e4       	ldi	r26, 0x4E	; 78
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	ee e4       	ldi	r30, 0x4E	; 78
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	82 60       	ori	r24, 0x02	; 2
    2534:	8c 93       	st	X, r24
	Set_Bit(TCCR1B_register,CS10);
    2536:	ae e4       	ldi	r26, 0x4E	; 78
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	ee e4       	ldi	r30, 0x4E	; 78
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	81 60       	ori	r24, 0x01	; 1
    2542:	8c 93       	st	X, r24
	Set_Bit(TCCR1B_register,CS12);
    2544:	ae e4       	ldi	r26, 0x4E	; 78
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	ee e4       	ldi	r30, 0x4E	; 78
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	84 60       	ori	r24, 0x04	; 4
    2550:	8c 93       	st	X, r24


	//out mode


}
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <TIMER1_OVF_Interrupt_Enable>:

void TIMER1_OVF_Interrupt_Enable(void){
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK_register,TOIE1);
    2560:	a9 e5       	ldi	r26, 0x59	; 89
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e9 e5       	ldi	r30, 0x59	; 89
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	84 60       	ori	r24, 0x04	; 4
    256c:	8c 93       	st	X, r24
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <TIMER1_OVF_Interrupt_Disable>:
void TIMER1_OVF_Interrupt_Disable(void){
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK_register,TOIE1);
    257c:	a9 e5       	ldi	r26, 0x59	; 89
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e9 e5       	ldi	r30, 0x59	; 89
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8b 7f       	andi	r24, 0xFB	; 251
    2588:	8c 93       	st	X, r24

}
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <TIMER1_OVF_Set_Callback_Address>:

void TIMER1_OVF_Set_Callback_Address(void (*PTR) (void)){
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <TIMER1_OVF_Set_Callback_Address+0x6>
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_OVF_CALLBACK_PTR=PTR;
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	90 93 8b 00 	sts	0x008B, r25
    25a6:	80 93 8a 00 	sts	0x008A, r24
}
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <TIMER1_Set_TCNT1_Register>:


void TIMER1_Set_TCNT1_Register(u16 Value){
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <TIMER1_Set_TCNT1_Register+0x6>
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_register=Value;
    25c2:	ec e4       	ldi	r30, 0x4C	; 76
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <TIMER1_Get_TCNT1_Register>:
u16 TIMER1_Get_TCNT1_Register(void){
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_register;
    25e0:	ec e4       	ldi	r30, 0x4C	; 76
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
}
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <__vector_9>:

void __vector_9 (void) __attribute__ ((signal,used, externally_visible)) ;
void __vector_9 (void){
    25ee:	1f 92       	push	r1
    25f0:	0f 92       	push	r0
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	0f 92       	push	r0
    25f6:	11 24       	eor	r1, r1
    25f8:	2f 93       	push	r18
    25fa:	3f 93       	push	r19
    25fc:	4f 93       	push	r20
    25fe:	5f 93       	push	r21
    2600:	6f 93       	push	r22
    2602:	7f 93       	push	r23
    2604:	8f 93       	push	r24
    2606:	9f 93       	push	r25
    2608:	af 93       	push	r26
    260a:	bf 93       	push	r27
    260c:	ef 93       	push	r30
    260e:	ff 93       	push	r31
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	TIMER1_OVF_CALLBACK_PTR();
    2618:	e0 91 8a 00 	lds	r30, 0x008A
    261c:	f0 91 8b 00 	lds	r31, 0x008B
    2620:	09 95       	icall
}
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	ff 91       	pop	r31
    2628:	ef 91       	pop	r30
    262a:	bf 91       	pop	r27
    262c:	af 91       	pop	r26
    262e:	9f 91       	pop	r25
    2630:	8f 91       	pop	r24
    2632:	7f 91       	pop	r23
    2634:	6f 91       	pop	r22
    2636:	5f 91       	pop	r21
    2638:	4f 91       	pop	r20
    263a:	3f 91       	pop	r19
    263c:	2f 91       	pop	r18
    263e:	0f 90       	pop	r0
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	0f 90       	pop	r0
    2644:	1f 90       	pop	r1
    2646:	18 95       	reti

00002648 <main>:
u32 Ovf0 =0 ;
u32 Counter1 = 0 ;
u32 temp = 0 ;
u32 freq = 0 ;

void main(void){
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	a6 97       	sbiw	r28, 0x26	; 38
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    265c:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_Init>
	LCD_Write_Command(lcd_Clear);
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>

	TIMER0_Init();
    2666:	0e 94 b7 11 	call	0x236e	; 0x236e <TIMER0_Init>
	TIMER1_Init();
    266a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <TIMER1_Init>

	TIMER0_OVF_Set_Callback_Address(time0);
    266e:	8a e4       	ldi	r24, 0x4A	; 74
    2670:	95 e1       	ldi	r25, 0x15	; 21
    2672:	0e 94 19 12 	call	0x2432	; 0x2432 <TIMER0_OVF_Set_Callback_Address>
	TIMER1_OVF_Set_Callback_Address(time1);
    2676:	84 e6       	ldi	r24, 0x64	; 100
    2678:	95 e1       	ldi	r25, 0x15	; 21
    267a:	0e 94 c8 12 	call	0x2590	; 0x2590 <TIMER1_OVF_Set_Callback_Address>

	TIMER0_OVF_Interrupt_Enable();
    267e:	0e 94 ef 11 	call	0x23de	; 0x23de <TIMER0_OVF_Interrupt_Enable>
	TIMER1_OVF_Interrupt_Enable();
    2682:	0e 94 ac 12 	call	0x2558	; 0x2558 <TIMER1_OVF_Interrupt_Enable>

	GLOBAL_INTERRUPT_Enable();
    2686:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <GLOBAL_INTERRUPT_Enable>
	DIO_SetPinDirection(PORT_D,PIN_0,PIN_INPUT);
    268a:	83 e0       	ldi	r24, 0x03	; 3
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_SetPinDirection>
	DIO_SetPinValue(PORT_D,PIN_0,PIN_HIGH); //Input pull_up
    2694:	83 e0       	ldi	r24, 0x03	; 3
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	0e 94 86 07 	call	0xf0c	; 0xf0c <DIO_SetPinValue>

	LCD_Write_String("Start <3",9);
    269e:	80 e6       	ldi	r24, 0x60	; 96
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	69 e0       	ldi	r22, 0x09	; 9
    26a4:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Write_String>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a8 ec       	ldi	r26, 0xC8	; 200
    26ae:	b2 e4       	ldi	r27, 0x42	; 66
    26b0:	8b a3       	std	Y+35, r24	; 0x23
    26b2:	9c a3       	std	Y+36, r25	; 0x24
    26b4:	ad a3       	std	Y+37, r26	; 0x25
    26b6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	6b a1       	ldd	r22, Y+35	; 0x23
    26ba:	7c a1       	ldd	r23, Y+36	; 0x24
    26bc:	8d a1       	ldd	r24, Y+37	; 0x25
    26be:	9e a1       	ldd	r25, Y+38	; 0x26
    26c0:	2d ec       	ldi	r18, 0xCD	; 205
    26c2:	3c ec       	ldi	r19, 0xCC	; 204
    26c4:	4c e2       	ldi	r20, 0x2C	; 44
    26c6:	55 e4       	ldi	r21, 0x45	; 69
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8f 8f       	std	Y+31, r24	; 0x1f
    26d2:	98 a3       	std	Y+32, r25	; 0x20
    26d4:	a9 a3       	std	Y+33, r26	; 0x21
    26d6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    26d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26da:	78 a1       	ldd	r23, Y+32	; 0x20
    26dc:	89 a1       	ldd	r24, Y+33	; 0x21
    26de:	9a a1       	ldd	r25, Y+34	; 0x22
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <main+0xb2>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9e 8f       	std	Y+30, r25	; 0x1e
    26f6:	8d 8f       	std	Y+29, r24	; 0x1d
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <main+0x130>
	else if (__tmp > 65535)
    26fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26fc:	78 a1       	ldd	r23, Y+32	; 0x20
    26fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2700:	9a a1       	ldd	r25, Y+34	; 0x22
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 8f       	std	Y+30, r25	; 0x1e
    2738:	8d 8f       	std	Y+29, r24	; 0x1d
    273a:	0f c0       	rjmp	.+30     	; 0x275a <main+0x112>
    273c:	84 e1       	ldi	r24, 0x14	; 20
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	9c 8f       	std	Y+28, r25	; 0x1c
    2742:	8b 8f       	std	Y+27, r24	; 0x1b
    2744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2746:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <main+0x100>
    274c:	9c 8f       	std	Y+28, r25	; 0x1c
    274e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2752:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9e 8f       	std	Y+30, r25	; 0x1e
    2758:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <main+0xf4>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2766:	78 a1       	ldd	r23, Y+32	; 0x20
    2768:	89 a1       	ldd	r24, Y+33	; 0x21
    276a:	9a a1       	ldd	r25, Y+34	; 0x22
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9e 8f       	std	Y+30, r25	; 0x1e
    2776:	8d 8f       	std	Y+29, r24	; 0x1d
    2778:	8d 8d       	ldd	r24, Y+29	; 0x1d
    277a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    277c:	9a 8f       	std	Y+26, r25	; 0x1a
    277e:	89 8f       	std	Y+25, r24	; 0x19
    2780:	89 8d       	ldd	r24, Y+25	; 0x19
    2782:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <main+0x13c>
    2788:	9a 8f       	std	Y+26, r25	; 0x1a
    278a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(100);
	while(1){
		Ovf1 = 0 ;
    278c:	10 92 8e 00 	sts	0x008E, r1
    2790:	10 92 8f 00 	sts	0x008F, r1
    2794:	10 92 90 00 	sts	0x0090, r1
    2798:	10 92 91 00 	sts	0x0091, r1
		Ovf0 = 0 ;
    279c:	10 92 92 00 	sts	0x0092, r1
    27a0:	10 92 93 00 	sts	0x0093, r1
    27a4:	10 92 94 00 	sts	0x0094, r1
    27a8:	10 92 95 00 	sts	0x0095, r1
		TIMER0_Set_TCNT0_Register(0);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	0e 94 0b 12 	call	0x2416	; 0x2416 <TIMER0_Set_TCNT0_Register>
		TIMER1_Set_TCNT1_Register(0);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 da 12 	call	0x25b4	; 0x25b4 <TIMER1_Set_TCNT1_Register>
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <main+0x176>

		while(Ovf0 <= 59){
			asm("NOP");
    27bc:	00 00       	nop
		Ovf1 = 0 ;
		Ovf0 = 0 ;
		TIMER0_Set_TCNT0_Register(0);
		TIMER1_Set_TCNT1_Register(0);

		while(Ovf0 <= 59){
    27be:	80 91 92 00 	lds	r24, 0x0092
    27c2:	90 91 93 00 	lds	r25, 0x0093
    27c6:	a0 91 94 00 	lds	r26, 0x0094
    27ca:	b0 91 95 00 	lds	r27, 0x0095
    27ce:	8c 33       	cpi	r24, 0x3C	; 60
    27d0:	91 05       	cpc	r25, r1
    27d2:	a1 05       	cpc	r26, r1
    27d4:	b1 05       	cpc	r27, r1
    27d6:	90 f3       	brcs	.-28     	; 0x27bc <main+0x174>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	a1 e6       	ldi	r26, 0x61	; 97
    27de:	b5 e4       	ldi	r27, 0x45	; 69
    27e0:	8d 8b       	std	Y+21, r24	; 0x15
    27e2:	9e 8b       	std	Y+22, r25	; 0x16
    27e4:	af 8b       	std	Y+23, r26	; 0x17
    27e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27e8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ea:	7e 89       	ldd	r23, Y+22	; 0x16
    27ec:	8f 89       	ldd	r24, Y+23	; 0x17
    27ee:	98 8d       	ldd	r25, Y+24	; 0x18
    27f0:	2a ef       	ldi	r18, 0xFA	; 250
    27f2:	3d ee       	ldi	r19, 0xED	; 237
    27f4:	4b e6       	ldi	r20, 0x6B	; 107
    27f6:	50 e4       	ldi	r21, 0x40	; 64
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	89 8b       	std	Y+17, r24	; 0x11
    2802:	9a 8b       	std	Y+18, r25	; 0x12
    2804:	ab 8b       	std	Y+19, r26	; 0x13
    2806:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2808:	69 89       	ldd	r22, Y+17	; 0x11
    280a:	7a 89       	ldd	r23, Y+18	; 0x12
    280c:	8b 89       	ldd	r24, Y+19	; 0x13
    280e:	9c 89       	ldd	r25, Y+20	; 0x14
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	1c f4       	brge	.+6      	; 0x2826 <main+0x1de>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	88 8b       	std	Y+16, r24	; 0x10
    2824:	91 c0       	rjmp	.+290    	; 0x2948 <main+0x300>
	else if (__tmp > 255)
    2826:	69 89       	ldd	r22, Y+17	; 0x11
    2828:	7a 89       	ldd	r23, Y+18	; 0x12
    282a:	8b 89       	ldd	r24, Y+19	; 0x13
    282c:	9c 89       	ldd	r25, Y+20	; 0x14
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4f e7       	ldi	r20, 0x7F	; 127
    2834:	53 e4       	ldi	r21, 0x43	; 67
    2836:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    283a:	18 16       	cp	r1, r24
    283c:	0c f0       	brlt	.+2      	; 0x2840 <main+0x1f8>
    283e:	7b c0       	rjmp	.+246    	; 0x2936 <main+0x2ee>
	{
		_delay_ms(__us / 1000.0);
    2840:	6d 89       	ldd	r22, Y+21	; 0x15
    2842:	7e 89       	ldd	r23, Y+22	; 0x16
    2844:	8f 89       	ldd	r24, Y+23	; 0x17
    2846:	98 8d       	ldd	r25, Y+24	; 0x18
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4a e7       	ldi	r20, 0x7A	; 122
    284e:	54 e4       	ldi	r21, 0x44	; 68
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8c 87       	std	Y+12, r24	; 0x0c
    285a:	9d 87       	std	Y+13, r25	; 0x0d
    285c:	ae 87       	std	Y+14, r26	; 0x0e
    285e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2860:	6c 85       	ldd	r22, Y+12	; 0x0c
    2862:	7d 85       	ldd	r23, Y+13	; 0x0d
    2864:	8e 85       	ldd	r24, Y+14	; 0x0e
    2866:	9f 85       	ldd	r25, Y+15	; 0x0f
    2868:	2d ec       	ldi	r18, 0xCD	; 205
    286a:	3c ec       	ldi	r19, 0xCC	; 204
    286c:	4c e2       	ldi	r20, 0x2C	; 44
    286e:	55 e4       	ldi	r21, 0x45	; 69
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	88 87       	std	Y+8, r24	; 0x08
    287a:	99 87       	std	Y+9, r25	; 0x09
    287c:	aa 87       	std	Y+10, r26	; 0x0a
    287e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2880:	68 85       	ldd	r22, Y+8	; 0x08
    2882:	79 85       	ldd	r23, Y+9	; 0x09
    2884:	8a 85       	ldd	r24, Y+10	; 0x0a
    2886:	9b 85       	ldd	r25, Y+11	; 0x0b
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2894:	88 23       	and	r24, r24
    2896:	2c f4       	brge	.+10     	; 0x28a2 <main+0x25a>
		__ticks = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9f 83       	std	Y+7, r25	; 0x07
    289e:	8e 83       	std	Y+6, r24	; 0x06
    28a0:	3f c0       	rjmp	.+126    	; 0x2920 <main+0x2d8>
	else if (__tmp > 65535)
    28a2:	68 85       	ldd	r22, Y+8	; 0x08
    28a4:	79 85       	ldd	r23, Y+9	; 0x09
    28a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	3f ef       	ldi	r19, 0xFF	; 255
    28ae:	4f e7       	ldi	r20, 0x7F	; 127
    28b0:	57 e4       	ldi	r21, 0x47	; 71
    28b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b6:	18 16       	cp	r1, r24
    28b8:	4c f5       	brge	.+82     	; 0x290c <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    28bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    28be:	8e 85       	ldd	r24, Y+14	; 0x0e
    28c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e2       	ldi	r20, 0x20	; 32
    28c8:	51 e4       	ldi	r21, 0x41	; 65
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9f 83       	std	Y+7, r25	; 0x07
    28e0:	8e 83       	std	Y+6, r24	; 0x06
    28e2:	0f c0       	rjmp	.+30     	; 0x2902 <main+0x2ba>
    28e4:	84 e1       	ldi	r24, 0x14	; 20
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	9d 83       	std	Y+5, r25	; 0x05
    28ea:	8c 83       	std	Y+4, r24	; 0x04
    28ec:	8c 81       	ldd	r24, Y+4	; 0x04
    28ee:	9d 81       	ldd	r25, Y+5	; 0x05
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <main+0x2a8>
    28f4:	9d 83       	std	Y+5, r25	; 0x05
    28f6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f8:	8e 81       	ldd	r24, Y+6	; 0x06
    28fa:	9f 81       	ldd	r25, Y+7	; 0x07
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	9f 83       	std	Y+7, r25	; 0x07
    2900:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2902:	8e 81       	ldd	r24, Y+6	; 0x06
    2904:	9f 81       	ldd	r25, Y+7	; 0x07
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	69 f7       	brne	.-38     	; 0x28e4 <main+0x29c>
    290a:	24 c0       	rjmp	.+72     	; 0x2954 <main+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290c:	68 85       	ldd	r22, Y+8	; 0x08
    290e:	79 85       	ldd	r23, Y+9	; 0x09
    2910:	8a 85       	ldd	r24, Y+10	; 0x0a
    2912:	9b 85       	ldd	r25, Y+11	; 0x0b
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9f 83       	std	Y+7, r25	; 0x07
    291e:	8e 83       	std	Y+6, r24	; 0x06
    2920:	8e 81       	ldd	r24, Y+6	; 0x06
    2922:	9f 81       	ldd	r25, Y+7	; 0x07
    2924:	9b 83       	std	Y+3, r25	; 0x03
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	9b 81       	ldd	r25, Y+3	; 0x03
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <main+0x2e4>
    2930:	9b 83       	std	Y+3, r25	; 0x03
    2932:	8a 83       	std	Y+2, r24	; 0x02
    2934:	0f c0       	rjmp	.+30     	; 0x2954 <main+0x30c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2936:	69 89       	ldd	r22, Y+17	; 0x11
    2938:	7a 89       	ldd	r23, Y+18	; 0x12
    293a:	8b 89       	ldd	r24, Y+19	; 0x13
    293c:	9c 89       	ldd	r25, Y+20	; 0x14
    293e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	88 8b       	std	Y+16, r24	; 0x10
    2948:	88 89       	ldd	r24, Y+16	; 0x10
    294a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	8a 95       	dec	r24
    2950:	f1 f7       	brne	.-4      	; 0x294e <main+0x306>
    2952:	89 83       	std	Y+1, r24	; 0x01
			asm("NOP");
		}
_delay_us(3600);
LCD_Write_Command(lcd_Clear);
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_Write_Command>

		TIMER0_OVF_Interrupt_Disable();
    295a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <TIMER0_OVF_Interrupt_Disable>
		TIMER1_OVF_Interrupt_Disable();
    295e:	0e 94 ba 12 	call	0x2574	; 0x2574 <TIMER1_OVF_Interrupt_Disable>

		temp = Ovf1 * 65536 ;
    2962:	80 91 8e 00 	lds	r24, 0x008E
    2966:	90 91 8f 00 	lds	r25, 0x008F
    296a:	a0 91 90 00 	lds	r26, 0x0090
    296e:	b0 91 91 00 	lds	r27, 0x0091
    2972:	dc 01       	movw	r26, r24
    2974:	99 27       	eor	r25, r25
    2976:	88 27       	eor	r24, r24
    2978:	80 93 9a 00 	sts	0x009A, r24
    297c:	90 93 9b 00 	sts	0x009B, r25
    2980:	a0 93 9c 00 	sts	0x009C, r26
    2984:	b0 93 9d 00 	sts	0x009D, r27
		freq = temp + TIMER1_Get_TCNT1_Register();
    2988:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <TIMER1_Get_TCNT1_Register>
    298c:	9c 01       	movw	r18, r24
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	80 91 9a 00 	lds	r24, 0x009A
    2996:	90 91 9b 00 	lds	r25, 0x009B
    299a:	a0 91 9c 00 	lds	r26, 0x009C
    299e:	b0 91 9d 00 	lds	r27, 0x009D
    29a2:	82 0f       	add	r24, r18
    29a4:	93 1f       	adc	r25, r19
    29a6:	a4 1f       	adc	r26, r20
    29a8:	b5 1f       	adc	r27, r21
    29aa:	80 93 9e 00 	sts	0x009E, r24
    29ae:	90 93 9f 00 	sts	0x009F, r25
    29b2:	a0 93 a0 00 	sts	0x00A0, r26
    29b6:	b0 93 a1 00 	sts	0x00A1, r27

		if( freq >= 1000000) {
    29ba:	80 91 9e 00 	lds	r24, 0x009E
    29be:	90 91 9f 00 	lds	r25, 0x009F
    29c2:	a0 91 a0 00 	lds	r26, 0x00A0
    29c6:	b0 91 a1 00 	lds	r27, 0x00A1
    29ca:	80 34       	cpi	r24, 0x40	; 64
    29cc:	22 e4       	ldi	r18, 0x42	; 66
    29ce:	92 07       	cpc	r25, r18
    29d0:	2f e0       	ldi	r18, 0x0F	; 15
    29d2:	a2 07       	cpc	r26, r18
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	b2 07       	cpc	r27, r18
    29d8:	68 f0       	brcs	.+26     	; 0x29f4 <main+0x3ac>
			MHz(freq);
    29da:	80 91 9e 00 	lds	r24, 0x009E
    29de:	90 91 9f 00 	lds	r25, 0x009F
    29e2:	a0 91 a0 00 	lds	r26, 0x00A0
    29e6:	b0 91 a1 00 	lds	r27, 0x00A1
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <MHz>
    29f2:	39 c0       	rjmp	.+114    	; 0x2a66 <main+0x41e>
		}
		else if ( freq >= 1000){
    29f4:	80 91 9e 00 	lds	r24, 0x009E
    29f8:	90 91 9f 00 	lds	r25, 0x009F
    29fc:	a0 91 a0 00 	lds	r26, 0x00A0
    2a00:	b0 91 a1 00 	lds	r27, 0x00A1
    2a04:	88 3e       	cpi	r24, 0xE8	; 232
    2a06:	23 e0       	ldi	r18, 0x03	; 3
    2a08:	92 07       	cpc	r25, r18
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	a2 07       	cpc	r26, r18
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	b2 07       	cpc	r27, r18
    2a12:	68 f0       	brcs	.+26     	; 0x2a2e <main+0x3e6>
			KHz(freq);
    2a14:	80 91 9e 00 	lds	r24, 0x009E
    2a18:	90 91 9f 00 	lds	r25, 0x009F
    2a1c:	a0 91 a0 00 	lds	r26, 0x00A0
    2a20:	b0 91 a1 00 	lds	r27, 0x00A1
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <KHz>
    2a2c:	1c c0       	rjmp	.+56     	; 0x2a66 <main+0x41e>
		}
		else if (freq < 1000){
    2a2e:	80 91 9e 00 	lds	r24, 0x009E
    2a32:	90 91 9f 00 	lds	r25, 0x009F
    2a36:	a0 91 a0 00 	lds	r26, 0x00A0
    2a3a:	b0 91 a1 00 	lds	r27, 0x00A1
    2a3e:	88 3e       	cpi	r24, 0xE8	; 232
    2a40:	23 e0       	ldi	r18, 0x03	; 3
    2a42:	92 07       	cpc	r25, r18
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	a2 07       	cpc	r26, r18
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	b2 07       	cpc	r27, r18
    2a4c:	60 f4       	brcc	.+24     	; 0x2a66 <main+0x41e>
			Hz(freq);
    2a4e:	80 91 9e 00 	lds	r24, 0x009E
    2a52:	90 91 9f 00 	lds	r25, 0x009F
    2a56:	a0 91 a0 00 	lds	r26, 0x00A0
    2a5a:	b0 91 a1 00 	lds	r27, 0x00A1
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <Hz>
		}
		if(DIO_GetPinValue(PORT_D,PIN_0)== 0 ){
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <DIO_GetPinValue>
    2a6e:	88 23       	and	r24, r24
    2a70:	61 f4       	brne	.+24     	; 0x2a8a <main+0x442>
			display(freq);
    2a72:	80 91 9e 00 	lds	r24, 0x009E
    2a76:	90 91 9f 00 	lds	r25, 0x009F
    2a7a:	a0 91 a0 00 	lds	r26, 0x00A0
    2a7e:	b0 91 a1 00 	lds	r27, 0x00A1
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 7e 15 	call	0x2afc	; 0x2afc <display>
		}
		TIMER0_OVF_Interrupt_Enable();
    2a8a:	0e 94 ef 11 	call	0x23de	; 0x23de <TIMER0_OVF_Interrupt_Enable>
		TIMER1_OVF_Interrupt_Enable();
    2a8e:	0e 94 ac 12 	call	0x2558	; 0x2558 <TIMER1_OVF_Interrupt_Enable>
    2a92:	7c ce       	rjmp	.-776    	; 0x278c <main+0x144>

00002a94 <time0>:
	}

}

void time0(void){
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
	Ovf0 ++ ;
    2a9c:	80 91 92 00 	lds	r24, 0x0092
    2aa0:	90 91 93 00 	lds	r25, 0x0093
    2aa4:	a0 91 94 00 	lds	r26, 0x0094
    2aa8:	b0 91 95 00 	lds	r27, 0x0095
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	a1 1d       	adc	r26, r1
    2ab0:	b1 1d       	adc	r27, r1
    2ab2:	80 93 92 00 	sts	0x0092, r24
    2ab6:	90 93 93 00 	sts	0x0093, r25
    2aba:	a0 93 94 00 	sts	0x0094, r26
    2abe:	b0 93 95 00 	sts	0x0095, r27
}
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <time1>:

void time1(void){
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
	Ovf1 ++ ;
    2ad0:	80 91 8e 00 	lds	r24, 0x008E
    2ad4:	90 91 8f 00 	lds	r25, 0x008F
    2ad8:	a0 91 90 00 	lds	r26, 0x0090
    2adc:	b0 91 91 00 	lds	r27, 0x0091
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	a1 1d       	adc	r26, r1
    2ae4:	b1 1d       	adc	r27, r1
    2ae6:	80 93 8e 00 	sts	0x008E, r24
    2aea:	90 93 8f 00 	sts	0x008F, r25
    2aee:	a0 93 90 00 	sts	0x0090, r26
    2af2:	b0 93 91 00 	sts	0x0091, r27
}
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <display>:
void display(u32 freq){
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <display+0x6>
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <display+0x8>
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	69 83       	std	Y+1, r22	; 0x01
    2b0a:	7a 83       	std	Y+2, r23	; 0x02
    2b0c:	8b 83       	std	Y+3, r24	; 0x03
    2b0e:	9c 83       	std	Y+4, r25	; 0x04
	LCD_Go_To(1,1);
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	0e 94 99 11 	call	0x2332	; 0x2332 <LCD_Go_To>
	LCD_Write_Data(((freq%100000000)/10000000) + '0' );
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	31 ee       	ldi	r19, 0xE1	; 225
    2b24:	45 ef       	ldi	r20, 0xF5	; 245
    2b26:	55 e0       	ldi	r21, 0x05	; 5
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	20 e8       	ldi	r18, 0x80	; 128
    2b36:	36 e9       	ldi	r19, 0x96	; 150
    2b38:	48 e9       	ldi	r20, 0x98	; 152
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2b44:	da 01       	movw	r26, r20
    2b46:	c9 01       	movw	r24, r18
    2b48:	80 5d       	subi	r24, 0xD0	; 208
    2b4a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%10000000)/1000000) + '0' );
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	ab 81       	ldd	r26, Y+3	; 0x03
    2b54:	bc 81       	ldd	r27, Y+4	; 0x04
    2b56:	20 e8       	ldi	r18, 0x80	; 128
    2b58:	36 e9       	ldi	r19, 0x96	; 150
    2b5a:	48 e9       	ldi	r20, 0x98	; 152
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	20 e4       	ldi	r18, 0x40	; 64
    2b6c:	32 e4       	ldi	r19, 0x42	; 66
    2b6e:	4f e0       	ldi	r20, 0x0F	; 15
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2b7a:	da 01       	movw	r26, r20
    2b7c:	c9 01       	movw	r24, r18
    2b7e:	80 5d       	subi	r24, 0xD0	; 208
    2b80:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%1000000)/100000) + '0' );
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	ab 81       	ldd	r26, Y+3	; 0x03
    2b8a:	bc 81       	ldd	r27, Y+4	; 0x04
    2b8c:	20 e4       	ldi	r18, 0x40	; 64
    2b8e:	32 e4       	ldi	r19, 0x42	; 66
    2b90:	4f e0       	ldi	r20, 0x0F	; 15
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	20 ea       	ldi	r18, 0xA0	; 160
    2ba2:	36 e8       	ldi	r19, 0x86	; 134
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2bb0:	da 01       	movw	r26, r20
    2bb2:	c9 01       	movw	r24, r18
    2bb4:	80 5d       	subi	r24, 0xD0	; 208
    2bb6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%100000)/10000) + '0' );
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	ab 81       	ldd	r26, Y+3	; 0x03
    2bc0:	bc 81       	ldd	r27, Y+4	; 0x04
    2bc2:	20 ea       	ldi	r18, 0xA0	; 160
    2bc4:	36 e8       	ldi	r19, 0x86	; 134
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	20 e1       	ldi	r18, 0x10	; 16
    2bd8:	37 e2       	ldi	r19, 0x27	; 39
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2be6:	da 01       	movw	r26, r20
    2be8:	c9 01       	movw	r24, r18
    2bea:	80 5d       	subi	r24, 0xD0	; 208
    2bec:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%10000)/1000) + '0' );
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	ab 81       	ldd	r26, Y+3	; 0x03
    2bf6:	bc 81       	ldd	r27, Y+4	; 0x04
    2bf8:	20 e1       	ldi	r18, 0x10	; 16
    2bfa:	37 e2       	ldi	r19, 0x27	; 39
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	28 ee       	ldi	r18, 0xE8	; 232
    2c0e:	33 e0       	ldi	r19, 0x03	; 3
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2c1c:	da 01       	movw	r26, r20
    2c1e:	c9 01       	movw	r24, r18
    2c20:	80 5d       	subi	r24, 0xD0	; 208
    2c22:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%1000)/100) +   '0' );
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2a:	ab 81       	ldd	r26, Y+3	; 0x03
    2c2c:	bc 81       	ldd	r27, Y+4	; 0x04
    2c2e:	28 ee       	ldi	r18, 0xE8	; 232
    2c30:	33 e0       	ldi	r19, 0x03	; 3
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	24 e6       	ldi	r18, 0x64	; 100
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2c52:	da 01       	movw	r26, r20
    2c54:	c9 01       	movw	r24, r18
    2c56:	80 5d       	subi	r24, 0xD0	; 208
    2c58:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%100)/10) +     '0' );
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c60:	ab 81       	ldd	r26, Y+3	; 0x03
    2c62:	bc 81       	ldd	r27, Y+4	; 0x04
    2c64:	24 e6       	ldi	r18, 0x64	; 100
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	2a e0       	ldi	r18, 0x0A	; 10
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e0       	ldi	r20, 0x00	; 0
    2c7e:	50 e0       	ldi	r21, 0x00	; 0
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2c88:	da 01       	movw	r26, r20
    2c8a:	c9 01       	movw	r24, r18
    2c8c:	80 5d       	subi	r24, 0xD0	; 208
    2c8e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%10)/1) +        '0' );
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	ab 81       	ldd	r26, Y+3	; 0x03
    2c98:	bc 81       	ldd	r27, Y+4	; 0x04
    2c9a:	2a e0       	ldi	r18, 0x0A	; 10
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	80 5d       	subi	r24, 0xD0	; 208
    2cb0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_String("Hz", 2 );
    2cb4:	89 e6       	ldi	r24, 0x69	; 105
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	62 e0       	ldi	r22, 0x02	; 2
    2cba:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Write_String>
}
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <MHz>:
void MHz(u32 freq){
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <MHz+0x6>
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <MHz+0x8>
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	69 83       	std	Y+1, r22	; 0x01
    2cda:	7a 83       	std	Y+2, r23	; 0x02
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
    2cde:	9c 83       	std	Y+4, r25	; 0x04
	LCD_Write_String("Freq =", 6 );
    2ce0:	8c e6       	ldi	r24, 0x6C	; 108
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	66 e0       	ldi	r22, 0x06	; 6
    2ce6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Write_String>
	LCD_Write_Data(((freq%100000000)/10000000) + '0' );
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	9a 81       	ldd	r25, Y+2	; 0x02
    2cee:	ab 81       	ldd	r26, Y+3	; 0x03
    2cf0:	bc 81       	ldd	r27, Y+4	; 0x04
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	31 ee       	ldi	r19, 0xE1	; 225
    2cf6:	45 ef       	ldi	r20, 0xF5	; 245
    2cf8:	55 e0       	ldi	r21, 0x05	; 5
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	20 e8       	ldi	r18, 0x80	; 128
    2d08:	36 e9       	ldi	r19, 0x96	; 150
    2d0a:	48 e9       	ldi	r20, 0x98	; 152
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2d16:	da 01       	movw	r26, r20
    2d18:	c9 01       	movw	r24, r18
    2d1a:	80 5d       	subi	r24, 0xD0	; 208
    2d1c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%10000000)/1000000) + '0' );
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	ab 81       	ldd	r26, Y+3	; 0x03
    2d26:	bc 81       	ldd	r27, Y+4	; 0x04
    2d28:	20 e8       	ldi	r18, 0x80	; 128
    2d2a:	36 e9       	ldi	r19, 0x96	; 150
    2d2c:	48 e9       	ldi	r20, 0x98	; 152
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	20 e4       	ldi	r18, 0x40	; 64
    2d3e:	32 e4       	ldi	r19, 0x42	; 66
    2d40:	4f e0       	ldi	r20, 0x0F	; 15
    2d42:	50 e0       	ldi	r21, 0x00	; 0
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2d4c:	da 01       	movw	r26, r20
    2d4e:	c9 01       	movw	r24, r18
    2d50:	80 5d       	subi	r24, 0xD0	; 208
    2d52:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data('.');
    2d56:	8e e2       	ldi	r24, 0x2E	; 46
    2d58:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%1000000)/100000) + '0' );
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	ab 81       	ldd	r26, Y+3	; 0x03
    2d62:	bc 81       	ldd	r27, Y+4	; 0x04
    2d64:	20 e4       	ldi	r18, 0x40	; 64
    2d66:	32 e4       	ldi	r19, 0x42	; 66
    2d68:	4f e0       	ldi	r20, 0x0F	; 15
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	20 ea       	ldi	r18, 0xA0	; 160
    2d7a:	36 e8       	ldi	r19, 0x86	; 134
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2d88:	da 01       	movw	r26, r20
    2d8a:	c9 01       	movw	r24, r18
    2d8c:	80 5d       	subi	r24, 0xD0	; 208
    2d8e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%100000)/10000) + '0' );
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	ab 81       	ldd	r26, Y+3	; 0x03
    2d98:	bc 81       	ldd	r27, Y+4	; 0x04
    2d9a:	20 ea       	ldi	r18, 0xA0	; 160
    2d9c:	36 e8       	ldi	r19, 0x86	; 134
    2d9e:	41 e0       	ldi	r20, 0x01	; 1
    2da0:	50 e0       	ldi	r21, 0x00	; 0
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	20 e1       	ldi	r18, 0x10	; 16
    2db0:	37 e2       	ldi	r19, 0x27	; 39
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	bc 01       	movw	r22, r24
    2db8:	cd 01       	movw	r24, r26
    2dba:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2dbe:	da 01       	movw	r26, r20
    2dc0:	c9 01       	movw	r24, r18
    2dc2:	80 5d       	subi	r24, 0xD0	; 208
    2dc4:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%10000)/1000) + '0' );
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	9a 81       	ldd	r25, Y+2	; 0x02
    2dcc:	ab 81       	ldd	r26, Y+3	; 0x03
    2dce:	bc 81       	ldd	r27, Y+4	; 0x04
    2dd0:	20 e1       	ldi	r18, 0x10	; 16
    2dd2:	37 e2       	ldi	r19, 0x27	; 39
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	28 ee       	ldi	r18, 0xE8	; 232
    2de6:	33 e0       	ldi	r19, 0x03	; 3
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2df4:	da 01       	movw	r26, r20
    2df6:	c9 01       	movw	r24, r18
    2df8:	80 5d       	subi	r24, 0xD0	; 208
    2dfa:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_String("MHz", 3 );
    2dfe:	83 e7       	ldi	r24, 0x73	; 115
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	63 e0       	ldi	r22, 0x03	; 3
    2e04:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Write_String>

}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <KHz>:
void KHz(u32 freq){
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <KHz+0x6>
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <KHz+0x8>
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	69 83       	std	Y+1, r22	; 0x01
    2e24:	7a 83       	std	Y+2, r23	; 0x02
    2e26:	8b 83       	std	Y+3, r24	; 0x03
    2e28:	9c 83       	std	Y+4, r25	; 0x04
	LCD_Write_String("Freq =", 6 );
    2e2a:	8c e6       	ldi	r24, 0x6C	; 108
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	66 e0       	ldi	r22, 0x06	; 6
    2e30:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Write_String>
	LCD_Write_Data(((freq%1000000)/100000) + '0' );
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	9a 81       	ldd	r25, Y+2	; 0x02
    2e38:	ab 81       	ldd	r26, Y+3	; 0x03
    2e3a:	bc 81       	ldd	r27, Y+4	; 0x04
    2e3c:	20 e4       	ldi	r18, 0x40	; 64
    2e3e:	32 e4       	ldi	r19, 0x42	; 66
    2e40:	4f e0       	ldi	r20, 0x0F	; 15
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	20 ea       	ldi	r18, 0xA0	; 160
    2e52:	36 e8       	ldi	r19, 0x86	; 134
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2e60:	da 01       	movw	r26, r20
    2e62:	c9 01       	movw	r24, r18
    2e64:	80 5d       	subi	r24, 0xD0	; 208
    2e66:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%100000)/10000) + '0' );
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	ab 81       	ldd	r26, Y+3	; 0x03
    2e70:	bc 81       	ldd	r27, Y+4	; 0x04
    2e72:	20 ea       	ldi	r18, 0xA0	; 160
    2e74:	36 e8       	ldi	r19, 0x86	; 134
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	20 e1       	ldi	r18, 0x10	; 16
    2e88:	37 e2       	ldi	r19, 0x27	; 39
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	50 e0       	ldi	r21, 0x00	; 0
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2e96:	da 01       	movw	r26, r20
    2e98:	c9 01       	movw	r24, r18
    2e9a:	80 5d       	subi	r24, 0xD0	; 208
    2e9c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%10000)/1000) + '0' );
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ea6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ea8:	20 e1       	ldi	r18, 0x10	; 16
    2eaa:	37 e2       	ldi	r19, 0x27	; 39
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	50 e0       	ldi	r21, 0x00	; 0
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	28 ee       	ldi	r18, 0xE8	; 232
    2ebe:	33 e0       	ldi	r19, 0x03	; 3
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	50 e0       	ldi	r21, 0x00	; 0
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2ecc:	da 01       	movw	r26, r20
    2ece:	c9 01       	movw	r24, r18
    2ed0:	80 5d       	subi	r24, 0xD0	; 208
    2ed2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data('.');
    2ed6:	8e e2       	ldi	r24, 0x2E	; 46
    2ed8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%1000)/100) +   '0' );
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ee2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ee4:	28 ee       	ldi	r18, 0xE8	; 232
    2ee6:	33 e0       	ldi	r19, 0x03	; 3
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	24 e6       	ldi	r18, 0x64	; 100
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2f08:	da 01       	movw	r26, r20
    2f0a:	c9 01       	movw	r24, r18
    2f0c:	80 5d       	subi	r24, 0xD0	; 208
    2f0e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%100)/10) +     '0' );
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	9a 81       	ldd	r25, Y+2	; 0x02
    2f16:	ab 81       	ldd	r26, Y+3	; 0x03
    2f18:	bc 81       	ldd	r27, Y+4	; 0x04
    2f1a:	24 e6       	ldi	r18, 0x64	; 100
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	50 e0       	ldi	r21, 0x00	; 0
    2f22:	bc 01       	movw	r22, r24
    2f24:	cd 01       	movw	r24, r26
    2f26:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	2a e0       	ldi	r18, 0x0A	; 10
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2f3e:	da 01       	movw	r26, r20
    2f40:	c9 01       	movw	r24, r18
    2f42:	80 5d       	subi	r24, 0xD0	; 208
    2f44:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%10)/1) +        '0' );
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f4e:	bc 81       	ldd	r27, Y+4	; 0x04
    2f50:	2a e0       	ldi	r18, 0x0A	; 10
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e0       	ldi	r20, 0x00	; 0
    2f56:	50 e0       	ldi	r21, 0x00	; 0
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	80 5d       	subi	r24, 0xD0	; 208
    2f66:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_String("KHz", 3 );
    2f6a:	87 e7       	ldi	r24, 0x77	; 119
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	63 e0       	ldi	r22, 0x03	; 3
    2f70:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Write_String>

}
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <Hz>:
void Hz(u32 freq){
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	00 d0       	rcall	.+0      	; 0x2f88 <Hz+0x6>
    2f88:	00 d0       	rcall	.+0      	; 0x2f8a <Hz+0x8>
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	69 83       	std	Y+1, r22	; 0x01
    2f90:	7a 83       	std	Y+2, r23	; 0x02
    2f92:	8b 83       	std	Y+3, r24	; 0x03
    2f94:	9c 83       	std	Y+4, r25	; 0x04
	LCD_Write_String("Freq =", 6 );
    2f96:	8c e6       	ldi	r24, 0x6C	; 108
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	66 e0       	ldi	r22, 0x06	; 6
    2f9c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Write_String>
	LCD_Write_Data(((freq%1000)/100) +   '0' );
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa4:	ab 81       	ldd	r26, Y+3	; 0x03
    2fa6:	bc 81       	ldd	r27, Y+4	; 0x04
    2fa8:	28 ee       	ldi	r18, 0xE8	; 232
    2faa:	33 e0       	ldi	r19, 0x03	; 3
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	50 e0       	ldi	r21, 0x00	; 0
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	24 e6       	ldi	r18, 0x64	; 100
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2fcc:	da 01       	movw	r26, r20
    2fce:	c9 01       	movw	r24, r18
    2fd0:	80 5d       	subi	r24, 0xD0	; 208
    2fd2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%100)/10) +     '0' );
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fda:	ab 81       	ldd	r26, Y+3	; 0x03
    2fdc:	bc 81       	ldd	r27, Y+4	; 0x04
    2fde:	24 e6       	ldi	r18, 0x64	; 100
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	2a e0       	ldi	r18, 0x0A	; 10
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    3002:	da 01       	movw	r26, r20
    3004:	c9 01       	movw	r24, r18
    3006:	80 5d       	subi	r24, 0xD0	; 208
    3008:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_Data(((freq%10)/1) +        '0' );
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	ab 81       	ldd	r26, Y+3	; 0x03
    3012:	bc 81       	ldd	r27, Y+4	; 0x04
    3014:	2a e0       	ldi	r18, 0x0A	; 10
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	50 e0       	ldi	r21, 0x00	; 0
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	80 5d       	subi	r24, 0xD0	; 208
    302a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_Write_Data>
	LCD_Write_String("Hz", 2 );
    302e:	89 e6       	ldi	r24, 0x69	; 105
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	62 e0       	ldi	r22, 0x02	; 2
    3034:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_Write_String>
}
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <__udivmodsi4>:
    3046:	a1 e2       	ldi	r26, 0x21	; 33
    3048:	1a 2e       	mov	r1, r26
    304a:	aa 1b       	sub	r26, r26
    304c:	bb 1b       	sub	r27, r27
    304e:	fd 01       	movw	r30, r26
    3050:	0d c0       	rjmp	.+26     	; 0x306c <__udivmodsi4_ep>

00003052 <__udivmodsi4_loop>:
    3052:	aa 1f       	adc	r26, r26
    3054:	bb 1f       	adc	r27, r27
    3056:	ee 1f       	adc	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	a2 17       	cp	r26, r18
    305c:	b3 07       	cpc	r27, r19
    305e:	e4 07       	cpc	r30, r20
    3060:	f5 07       	cpc	r31, r21
    3062:	20 f0       	brcs	.+8      	; 0x306c <__udivmodsi4_ep>
    3064:	a2 1b       	sub	r26, r18
    3066:	b3 0b       	sbc	r27, r19
    3068:	e4 0b       	sbc	r30, r20
    306a:	f5 0b       	sbc	r31, r21

0000306c <__udivmodsi4_ep>:
    306c:	66 1f       	adc	r22, r22
    306e:	77 1f       	adc	r23, r23
    3070:	88 1f       	adc	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	1a 94       	dec	r1
    3076:	69 f7       	brne	.-38     	; 0x3052 <__udivmodsi4_loop>
    3078:	60 95       	com	r22
    307a:	70 95       	com	r23
    307c:	80 95       	com	r24
    307e:	90 95       	com	r25
    3080:	9b 01       	movw	r18, r22
    3082:	ac 01       	movw	r20, r24
    3084:	bd 01       	movw	r22, r26
    3086:	cf 01       	movw	r24, r30
    3088:	08 95       	ret

0000308a <__prologue_saves__>:
    308a:	2f 92       	push	r2
    308c:	3f 92       	push	r3
    308e:	4f 92       	push	r4
    3090:	5f 92       	push	r5
    3092:	6f 92       	push	r6
    3094:	7f 92       	push	r7
    3096:	8f 92       	push	r8
    3098:	9f 92       	push	r9
    309a:	af 92       	push	r10
    309c:	bf 92       	push	r11
    309e:	cf 92       	push	r12
    30a0:	df 92       	push	r13
    30a2:	ef 92       	push	r14
    30a4:	ff 92       	push	r15
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	ca 1b       	sub	r28, r26
    30b4:	db 0b       	sbc	r29, r27
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	09 94       	ijmp

000030c2 <__epilogue_restores__>:
    30c2:	2a 88       	ldd	r2, Y+18	; 0x12
    30c4:	39 88       	ldd	r3, Y+17	; 0x11
    30c6:	48 88       	ldd	r4, Y+16	; 0x10
    30c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    30ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    30cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    30ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    30d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    30d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    30d4:	b9 84       	ldd	r11, Y+9	; 0x09
    30d6:	c8 84       	ldd	r12, Y+8	; 0x08
    30d8:	df 80       	ldd	r13, Y+7	; 0x07
    30da:	ee 80       	ldd	r14, Y+6	; 0x06
    30dc:	fd 80       	ldd	r15, Y+5	; 0x05
    30de:	0c 81       	ldd	r16, Y+4	; 0x04
    30e0:	1b 81       	ldd	r17, Y+3	; 0x03
    30e2:	aa 81       	ldd	r26, Y+2	; 0x02
    30e4:	b9 81       	ldd	r27, Y+1	; 0x01
    30e6:	ce 0f       	add	r28, r30
    30e8:	d1 1d       	adc	r29, r1
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	ed 01       	movw	r28, r26
    30f6:	08 95       	ret

000030f8 <_exit>:
    30f8:	f8 94       	cli

000030fa <__stop_program>:
    30fa:	ff cf       	rjmp	.-2      	; 0x30fa <__stop_program>
